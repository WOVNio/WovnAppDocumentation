{"searchDocs":[{"title":"WOVN Settings Screen in the App Info","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/English/Android/setup_wovn_settings_in_app_info","content":"","keywords":"","version":"Next"},{"title":"Setup Instructions​","type":1,"pageTitle":"WOVN Settings Screen in the App Info","url":"/WovnAppDocumentation/docs/English/Android/setup_wovn_settings_in_app_info#setup-instructions","content":" To integrate the WOVN Settings screen into your app, add the following code to your AndroidManifest.xml file. This configuration adds the pre-configured WOVN Settings screen to the App Info section of your app.  &lt;activity android:name=&quot;io.wovn.wovnapp.debugmode.WovnSettingsActivity&quot; android:label=&quot;Translation Settings&quot; android:exported=&quot;true&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.APPLICATION_PREFERENCES&quot; /&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt; &lt;/intent-filter&gt; &lt;/activity&gt;   ","version":"Next","tagName":"h2"},{"title":"Demonstration​","type":1,"pageTitle":"WOVN Settings Screen in the App Info","url":"/WovnAppDocumentation/docs/English/Android/setup_wovn_settings_in_app_info#demonstration","content":" You can preview the functionality of the WOVN Settings screen in this video:    ","version":"Next","tagName":"h2"},{"title":"NOTE​","type":1,"pageTitle":"WOVN Settings Screen in the App Info","url":"/WovnAppDocumentation/docs/English/Android/setup_wovn_settings_in_app_info#note","content":" Users must enter the correct token in the Validation Token field to modify settings. This ensures that only authorized users can make changes. ","version":"Next","tagName":"h2"},{"title":"WOVN Debug Mode Feature","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/English/iOS/debug_mode","content":"","keywords":"","version":"Next"},{"title":"Feature Overview​","type":1,"pageTitle":"WOVN Debug Mode Feature","url":"/WovnAppDocumentation/docs/English/iOS/debug_mode#feature-overview","content":" Enabling Debug Mode activates App Operator Mode, which includes the following benefits:  Faster Reporting and Re-Translation: The app reports data and re-translates content approximately every 10 seconds, enabling rapid feedback during development.User Privacy Protection: When paired with Limit reporting to only app operator, Debug Mode ensures that no end-user data is transmitted to WOVN.    ","version":"Next","tagName":"h2"},{"title":"How to Enable Debug Mode​","type":1,"pageTitle":"WOVN Debug Mode Feature","url":"/WovnAppDocumentation/docs/English/iOS/debug_mode#how-to-enable-debug-mode","content":" Debug Mode can be activated either programmatically or via the WOVN Settings screen in your app.  ","version":"Next","tagName":"h2"},{"title":"1. Enabling Debug Mode Programmatically​","type":1,"pageTitle":"WOVN Debug Mode Feature","url":"/WovnAppDocumentation/docs/English/iOS/debug_mode#1-enabling-debug-mode-programmatically","content":" To enable Debug Mode directly within your app’s code, you can use the following function:  public static func start(appGroupIdentifier: String? = nil, isDebugMode: Bool = false, autoTranslateUIKit: Bool = true)   Pass true to isDebugMode to enable Debug Mode and enter App Operator Mode. A common use case is enabling Debug Mode in debug builds only, using _isDebugAssertConfiguration().  class AppDelegate: UIResponder, UIApplicationDelegate, MessagingDelegate, UNUserNotificationCenterDelegate { func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool { Wovn.start(isDebugMode: _isDebugAssertConfiguration()) // Enable Debug Mode based on debug build } }   This approach is simple but typically requires separate builds for development (debug) and production (release).  ","version":"Next","tagName":"h3"},{"title":"2. Enabling Debug Mode via the WOVN Settings Screen​","type":1,"pageTitle":"WOVN Debug Mode Feature","url":"/WovnAppDocumentation/docs/English/iOS/debug_mode#2-enabling-debug-mode-via-the-wovn-settings-screen","content":" Alternatively, Debug Mode can be enabled through the WOVN Settings screen in your app. To integrate and access the WOVN Settings screen, refer to the setup_wovn_settings_in_app_info.md document.  Once the WOVN Settings screen is set up, follow these steps to enable Debug Mode:  Navigate to the Translation Settings section within your app’s App Info screen.Enter your WOVN token into the Validation Token field.Toggle the Debug Mode switch to enable the feature.The app will now enter Debug Mode, activating Operator Mode for faster translation updates and more frequent reporting.   ","version":"Next","tagName":"h3"},{"title":"How to install and configure WOVN iOS SDK","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/English/iOS/ios_quick_start","content":"","keywords":"","version":"Next"},{"title":"WOVN SDK installation with one command​","type":1,"pageTitle":"How to install and configure WOVN iOS SDK","url":"/WovnAppDocumentation/docs/English/iOS/ios_quick_start#wovn-sdk-installation-with-one-command","content":" You can install the WOVN iOS SDK with all the necessary configurations using the following command. Note that the command will make changes to your project, so make sure to commit your changes before running the command.  export WOVN_PROJECT_TOKEN=wovn_project_token export WOVN_API_KEY=wovn_api_key export IOS_PROJECT_PATH=absolute_path_to_ios_project export IOS_PROJECT_TARGETS=ios_project_target1,ios_project_target2 # Optional, default is the same as project name export WOVN_CLI_VERSION=latest # or specific version bash &lt;(curl -fsSL https://raw.githubusercontent.com/WOVNio/WovnAppDocumentation/main/docs/English/iOS/scripts/ios_install_script.sh)   Example:  export WOVN_PROJECT_TOKEN=WTOKEN export WOVN_API_KEY=eyJhbGciOiJIUzI1NiJ9.eyJwcm9qZWN0X3Rva2VuIjoiUjlFAKEvIiwidG9rZW5fdXVpZCI6IFAKETY3NTA1LWNjOWEtNDJiMS05N2YzLFAKEDA5YWIyYzJlZiJ9.BmeOFN78Qj-FAKETS16BVOFAKEwbqZgHZvYVxDjYriE export IOS_PROJECT_PATH=/Users/user/Documents/Projects/WovnAppRepos/iOS/examples/wovn-ios-demoapp/wovn-ios-demoapp.xcodeproj export IOS_PROJECT_TARGETS=wovn-ios-demoapp,wovn-ios-demoappTests export WOVN_CLI_VERSION=latest bash &lt;(curl -fsSL https://raw.githubusercontent.com/WOVNio/WovnAppDocumentation/main/docs/English/iOS/scripts/ios_install_script.sh)   export WOVN_PROJECT_TOKEN=WTOKEN export WOVN_API_KEY=eyJhbGciOiJIUzI1NiJ9.eyJwcm9qZWN0X3Rva2VuIjoiUjlFAKEvIiwidG9rZW5fdXVpZCI6IFAKETY3NTA1LWNjOWEtNDJiMS05N2YzLFAKEDA5YWIyYzJlZiJ9.BmeOFN78Qj-FAKETS16BVOFAKEwbqZgHZvYVxDjYriE export IOS_PROJECT_PATH=/Users/user/Documents/Projects/WovnAppRepos/iOS/examples/wovn-ios-demoapp/wovn-ios-demoapp.xcodeproj export WOVN_CLI_VERSION=latest bash &lt;(curl -fsSL https://raw.githubusercontent.com/WOVNio/WovnAppDocumentation/main/docs/English/iOS/scripts/ios_install_script.sh)   ","version":"Next","tagName":"h2"},{"title":"Command breakdown​","type":1,"pageTitle":"How to install and configure WOVN iOS SDK","url":"/WovnAppDocumentation/docs/English/iOS/ios_quick_start#command-breakdown","content":" The command above will execute the following steps:  ","version":"Next","tagName":"h2"},{"title":"Step 1: Download and install the WOVN CLI tool​","type":1,"pageTitle":"How to install and configure WOVN iOS SDK","url":"/WovnAppDocumentation/docs/English/iOS/ios_quick_start#step-1-download-and-install-the-wovn-cli-tool","content":" # Make sure you have the latest version of the WOVN CLI tool gem uninstall wovn_sdk --all --executables --ignore-dependencies # Download the gem curl -o wovn_sdk.gem https://download.wovn.app/cli/$WOVN_CLI_VERSION/wovn_sdk.gem # Install the gem gem install ./wovn_sdk.gem   ","version":"Next","tagName":"h3"},{"title":"Step 2: Config the wovn_sdk with your Wovn Project Token and API Key​","type":1,"pageTitle":"How to install and configure WOVN iOS SDK","url":"/WovnAppDocumentation/docs/English/iOS/ios_quick_start#step-2-config-the-wovn_sdk-with-your-wovn-project-token-and-api-key","content":" Note that after this step, you don't need to provide the token and API key in the following wovn_sdk commands.  wovn_sdk config --token={WOVN_PROJECT_TOKEN} --api_key={WOVN_API_KEY}   ","version":"Next","tagName":"h3"},{"title":"Step 3: Using wovn_sdk to install WOVN iOS SDK into your project​","type":1,"pageTitle":"How to install and configure WOVN iOS SDK","url":"/WovnAppDocumentation/docs/English/iOS/ios_quick_start#step-3-using-wovn_sdk-to-install-wovn-ios-sdk-into-your-project","content":" wovn_sdk setup --platform=iOS --project_path={absolute_path_to_ios_project} --sdk_version=latest --with_kickstart --with_string_resources -y  ","version":"Next","tagName":"h3"},{"title":"How to install and configure WOVN Android SDK","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/English/Android/android_quick_start","content":"","keywords":"","version":"Next"},{"title":"WOVN SDK installation with one command​","type":1,"pageTitle":"How to install and configure WOVN Android SDK","url":"/WovnAppDocumentation/docs/English/Android/android_quick_start#wovn-sdk-installation-with-one-command","content":" You can install the WOVN Android SDK with all the necessary configurations using the following command. Note that the command will make changes to your project, so make sure to commit your changes before running the command.  export WOVN_PROJECT_TOKEN=wovn_project_token export WOVN_API_KEY=wovn_api_key export ANDROID_PROJECT_PATH=absolute_path_to_android_project export WOVN_CLI_VERSION=latest # or specific version bash &lt;(curl -fsSL https://raw.githubusercontent.com/WOVNio/WovnAppDocumentation/main/docs/English/Android/scripts/android_install_script.sh)   Example:  export WOVN_PROJECT_TOKEN=WTOKEN export WOVN_API_KEY=eyJhbGciOiJIUzI1NiJ9.eyJwcm9qZWN0X3Rva2VuIjoiUjlFAKEvIiwidG9rZW5fdXVpZCI6IFAKETY3NTA1LWNjOWEtNDJiMS05N2YzLFAKEDA5YWIyYzJlZiJ9.BmeOFN78Qj-FAKETS16BVOFAKEwbqZgHZvYVxDjYriE export ANDROID_PROJECT_PATH=/Users/user/Documents/Projects/WovnAppRepos/Android/examples/wovn-android-demoapp export WOVN_CLI_VERSION=latest bash &lt;(curl -fsSL https://raw.githubusercontent.com/WOVNio/WovnAppDocumentation/main/docs/English/Android/scripts/android_install_script.sh)   ","version":"Next","tagName":"h2"},{"title":"Command breakdown​","type":1,"pageTitle":"How to install and configure WOVN Android SDK","url":"/WovnAppDocumentation/docs/English/Android/android_quick_start#command-breakdown","content":" The command above will execute the following steps:  ","version":"Next","tagName":"h2"},{"title":"Step 1: Download and install the WOVN CLI tool​","type":1,"pageTitle":"How to install and configure WOVN Android SDK","url":"/WovnAppDocumentation/docs/English/Android/android_quick_start#step-1-download-and-install-the-wovn-cli-tool","content":" # Make sure you have the latest version of the WOVN CLI tool gem uninstall wovn_sdk --all --executables --ignore-dependencies # Download the gem curl -o wovn_sdk.gem https://download.wovn.app/cli/$WOVN_CLI_VERSION/wovn_sdk.gem # Install the gem gem install ./wovn_sdk.gem   ","version":"Next","tagName":"h3"},{"title":"Step 2: Config the wovn_sdk with your Wovn Project Token and API Key​","type":1,"pageTitle":"How to install and configure WOVN Android SDK","url":"/WovnAppDocumentation/docs/English/Android/android_quick_start#step-2-config-the-wovn_sdk-with-your-wovn-project-token-and-api-key","content":" Note that after this step, you don't need to provide the token and API key in the following wovn_sdk commands.  wovn_sdk config --token={WOVN_PROJECT_TOKEN} --api_key={WOVN_API_KEY}   ","version":"Next","tagName":"h3"},{"title":"Step 3: Using wovn_sdk to install WOVN Android SDK into your project​","type":1,"pageTitle":"How to install and configure WOVN Android SDK","url":"/WovnAppDocumentation/docs/English/Android/android_quick_start#step-3-using-wovn_sdk-to-install-wovn-android-sdk-into-your-project","content":" wovn_sdk setup --platform=Android --project_path={absolute_path_to_android_project} --sdk_version=latest --with_kickstart --with_string_resources -y  ","version":"Next","tagName":"h3"},{"title":"WOVN Debug Mode Feature","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/English/Android/debug_mode","content":"","keywords":"","version":"Next"},{"title":"Feature Overview​","type":1,"pageTitle":"WOVN Debug Mode Feature","url":"/WovnAppDocumentation/docs/English/Android/debug_mode#feature-overview","content":" Enabling Debug Mode activates App Operator Mode, which includes the following benefits:  Faster Reporting and Re-Translation: The app reports data and re-translates content approximately every 10 seconds, enabling rapid feedback during development.User Privacy Protection: When paired with Limit reporting to only app operator, Debug Mode ensures that no end-user data is transmitted to WOVN.    ","version":"Next","tagName":"h2"},{"title":"How to Enable Debug Mode​","type":1,"pageTitle":"WOVN Debug Mode Feature","url":"/WovnAppDocumentation/docs/English/Android/debug_mode#how-to-enable-debug-mode","content":" Debug Mode can be activated either programmatically or via the WOVN Settings screen in your app.  ","version":"Next","tagName":"h2"},{"title":"1. Enable Debug Mode Programmatically​","type":1,"pageTitle":"WOVN Debug Mode Feature","url":"/WovnAppDocumentation/docs/English/Android/debug_mode#1-enable-debug-mode-programmatically","content":" To activate Debug Mode through code, use the following function:  public WovnActivityLifecycleCallbacks(boolean isDebugMode)   Pass true to isDebugMode to enable Debug Mode and enter App Operator Mode. A common use case is enabling Debug Mode in debug builds only, using BuildConfig.DEBUG.  Example in Kotlin:  class MyApplication : Application() { override fun onCreate() { super.onCreate() this.registerActivityLifecycleCallbacks(WovnActivityLifecycleCallbacks(BuildConfig.DEBUG)) // Enable Debug Mode based on BuildConfig.DEBUG } }   This method is straightforward but generally requires separate builds for development (debug) and production (release).  ","version":"Next","tagName":"h3"},{"title":"2. Enable Debug Mode via WOVN Settings Screen​","type":1,"pageTitle":"WOVN Debug Mode Feature","url":"/WovnAppDocumentation/docs/English/Android/debug_mode#2-enable-debug-mode-via-wovn-settings-screen","content":" Alternatively, Debug Mode can be enabled through the WOVN Settings screen. For details on integrating this screen, refer to the setup_wovn_settings_in_app_info.md document.  Once the WOVN Settings screen is set up, follow these steps to enable Debug Mode:  Navigate to the Translation Settings section within your app’s App Info screen.Enter your WOVN token into the Validation Token field.Toggle the Debug Mode switch to enable the feature.The app will now enter Debug Mode, activating App Operator Mode for faster translation updates and more frequent reporting. ","version":"Next","tagName":"h3"},{"title":"WOVN KickStart Feature","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/English/Android/kick_start","content":"","keywords":"","version":"Next"},{"title":"WOVN Data Priority​","type":1,"pageTitle":"WOVN KickStart Feature","url":"/WovnAppDocumentation/docs/English/Android/kick_start#wovn-data-priority","content":" The WOVN SDK uses three sources for localization data, prioritized as follows:  API Data: Fetched directly from the WOVN API server.Highest priority and automatically cached for future use. Cache Data: Stored locally when API Data is fetched.Second highest priority. Kick Start Data: Pre-loaded localization data included in the application build.Lowest priority, used only when Cache Data and API Data are unavailable at the app’s startup.  ","version":"Next","tagName":"h2"},{"title":"Using the WOVN KickStart Feature​","type":1,"pageTitle":"WOVN KickStart Feature","url":"/WovnAppDocumentation/docs/English/Android/kick_start#using-the-wovn-kickstart-feature","content":" If the wovn.kickstart file is included in the build, the SDK automatically attempts to load it when no Cache Data is available. You can generate and include the wovn.kickstart file using the wovn_sdk tool.  ","version":"Next","tagName":"h2"},{"title":"1. Download wovn.kickstart During SDK Setup​","type":1,"pageTitle":"WOVN KickStart Feature","url":"/WovnAppDocumentation/docs/English/Android/kick_start#1-download-wovnkickstart-during-sdk-setup","content":" To automatically download the wovn.kickstart file during SDK setup, use the --with_kickstart option:  wovn_sdk setup --platform=Android --project_path=./path/to/the/Android/project --sdk_version=latest --with_kickstart --with_string_resources -y   ","version":"Next","tagName":"h3"},{"title":"2. Download wovn.kickstart After SDK Setup​","type":1,"pageTitle":"WOVN KickStart Feature","url":"/WovnAppDocumentation/docs/English/Android/kick_start#2-download-wovnkickstart-after-sdk-setup","content":" If you need to fetch or update the wovn.kickstart file after the SDK setup, use the following command. It’s recommended to run this before building or releasing the application:  wovn_sdk kickstart --platform=Android --project_path=./path/to/the/Android/project  ","version":"Next","tagName":"h3"},{"title":"Translate Text feature","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/English/Android/manual_translation_for_view_and_texts","content":"","keywords":"","version":"Next"},{"title":"Translate Views​","type":1,"pageTitle":"Translate Text feature","url":"/WovnAppDocumentation/docs/English/Android/manual_translation_for_view_and_texts#translate-views","content":" To translate a View, use the Wovn.translate(ViewToTranslate_View, ScreenName_String) method. This method translates the text of the specified View and updates the View with the translated text. Note that after calling this method, WOVN SDK will follow ViewToTranslate_View and automatically translate it if something changes.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Translate Text feature","url":"/WovnAppDocumentation/docs/English/Android/manual_translation_for_view_and_texts#example","content":" Wovn.changeLang(&quot;ja&quot;); TextView notAutoTranslatedView1 = findViewById(R.id.not_auto_translated_text_view_1); Wovn.translate(notAutoTranslatedView1, &quot;ScreenName&quot;); TextView notAutoTranslatedView2 = findViewById(R.id.not_auto_translated_text_view_2); Wovn.translate(notAutoTranslatedView2); // ScreenName is omitable. In this case, WOVN SDK will use the current Activity's name as the ScreenName. // [some code] notAutoTranslatedView1.setText(&quot;This text will be translated by WOVN SDK automatically without calling Wovn.translate again!&quot;); Logger.d(notAutoTranslatedView1.getText().toString()); // -&gt; このテキストは、Wovn.translate を再度呼び出さなくても、WOVN SDK によって自動的に翻訳されます。   ","version":"Next","tagName":"h3"},{"title":"Translate Texts​","type":1,"pageTitle":"Translate Text feature","url":"/WovnAppDocumentation/docs/English/Android/manual_translation_for_view_and_texts#translate-texts","content":" To translate a text directly, use the Wovn.translate(TextToTranslate_String, ScreenName_String) method. This method translates the specified text and returns the translated text.  Wovn.changeLang(&quot;ja&quot;); Logger.d(Wovn.translate(&quot;This text will be translated to the current language!&quot;, &quot;ScreenName&quot;)); // -&gt; このテキストは現在の言語に翻訳されます。  ","version":"Next","tagName":"h2"},{"title":"Protect User Privacy","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/English/Android/protect_user_privacy","content":"","keywords":"","version":"Next"},{"title":"1. Debug Mode with Limit Reporting to Only App Operator​","type":1,"pageTitle":"Protect User Privacy","url":"/WovnAppDocumentation/docs/English/Android/protect_user_privacy#1-debug-mode-with-limit-reporting-to-only-app-operator","content":" Follow the instructions in the WOVN Debug Mode document to enable Debug Mode.Limit reporting to only app operator is enabled by default. For changes to this behavior, please contact WOVN support.  Note: This approach is highly recommended for its simplicity. It guarantees 100% user privacy while enabling other development and testing features.  ","version":"Next","tagName":"h2"},{"title":"2. Wovn.setWovnIgnore​","type":1,"pageTitle":"Protect User Privacy","url":"/WovnAppDocumentation/docs/English/Android/protect_user_privacy#2-wovnsetwovnignore","content":" To exclude sensitive information from translation, use the Wovn.setWovnIgnore method. This allows you to specify which views should not be translated.  Note: It is recommended to call Wovn.setWovnIgnore before the view is added to the screen, ideally in the onCreate method of the Activity. This to ensure that the view is not translated when it is first displayed.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Protect User Privacy","url":"/WovnAppDocumentation/docs/English/Android/protect_user_privacy#example","content":" Wovn.setWovnIgnore(viewWithSensitiveData, true);  ","version":"Next","tagName":"h3"},{"title":"Wovn Push Notification Feature","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/English/Android/translate_push_notification","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Wovn Push Notification Feature","url":"/WovnAppDocumentation/docs/English/Android/translate_push_notification#overview","content":" In this document, you will learn:  How Wovn can translate your notificationHow to allow Wovn to access and then translate notification data from the server before showing it to the end userHow to use Wovn to translate notification data containing sensitive user informationHow to use Wovn to translate local push notification  ","version":"Next","tagName":"h2"},{"title":"Detail​","type":1,"pageTitle":"Wovn Push Notification Feature","url":"/WovnAppDocumentation/docs/English/Android/translate_push_notification#detail","content":" ","version":"Next","tagName":"h2"},{"title":"1. How Wovn can translate your notification​","type":1,"pageTitle":"Wovn Push Notification Feature","url":"/WovnAppDocumentation/docs/English/Android/translate_push_notification#1-how-wovn-can-translate-your-notification","content":"   First, send a test push notification to your test device. This will allow Wovn to report the notification data to Wovn Dashboard and translate it.After Wovn Dashboard translated the notification data, send the same notification again to your test device to confirm.After confirming the notification has been translated, you can send it to all your users.  ","version":"Next","tagName":"h3"},{"title":"2. How to allow Wovn to access and then translate notification data from the server before showing it to the end user​","type":1,"pageTitle":"Wovn Push Notification Feature","url":"/WovnAppDocumentation/docs/English/Android/translate_push_notification#2-how-to-allow-wovn-to-access-and-then-translate-notification-data-from-the-server-before-showing-it-to-the-end-user","content":" If you haven’t extended FirebaseMessagingService to add custom logic, please do so by following this document Add the following code inside the FirebaseMessagingService extended class. Please do not forget to import Wovn and other necessary dependencies. @Override public void handleIntent(Intent intentSrc) { Intent intentDst = Wovn.translateFirebaseNotificationIntent(intentSrc); final String title = intentDst.getStringExtra(&quot;title&quot;) == null ? intentDst.getStringExtra(&quot;gcm.notification.title&quot;) : intentDst.getStringExtra(&quot;title&quot;); final String body = intentDst.getStringExtra(&quot;body&quot;) == null ? intentDst.getStringExtra(&quot;gcm.notification.body&quot;) : intentDst.getStringExtra(&quot;body&quot;); showNotification(title, body); } public void showNotification(String title, String message) { if( title != null || message != null ) { Context context = getApplicationContext(); showNotification(context, title, message); } } public static void showNotification(Context context, String title, String message) { final String CHANNEL_ID = &quot;MyChannelId&quot;; final int NOTIFICATION_ID = 1; NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE); // Create a notification channel for Android Oreo and above if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) { NotificationChannel channel = new NotificationChannel(CHANNEL_ID, &quot;Channel Name&quot;, NotificationManager.IMPORTANCE_DEFAULT); notificationManager.createNotificationChannel(channel); } // Create the notification NotificationCompat.Builder builder = new NotificationCompat.Builder(context, CHANNEL_ID) .setSmallIcon(R.drawable.arrow_point_to_right) .setContentTitle(title) .setContentText(message) .setAutoCancel(true); // Show the notification notificationManager.notify(NOTIFICATION_ID, builder.build()); // For Wovn only lastNotiTitle = title; lastNotiBody = message; } After step 2, your file should look like this: package io.wovn.app.demo.activities; import android.app.NotificationChannel; import android.app.NotificationManager; import android.content.Context; import android.content.Intent; import android.os.Build; import androidx.annotation.NonNull; import androidx.core.app.NotificationCompat; import com.google.firebase.messaging.FirebaseMessagingService; import com.google.firebase.messaging.RemoteMessage; import io.wovn.app.demo.R; import io.wovn.wovnapp.Wovn; public class WovnFirebaseMessagingService extends FirebaseMessagingService { public static String lastNotiTitle = &quot;&quot;; public static String lastNotiBody = &quot;&quot;; @Override public void onMessageReceived(@NonNull RemoteMessage remoteMessage) { // This function will not be called since we overridden handleIntent } @Override public void handleIntent(Intent intentSrc) { Intent intentDst = Wovn.translateFirebaseNotificationIntent(intentSrc); final String title = intentDst.getStringExtra(&quot;title&quot;) == null ? intentDst.getStringExtra(&quot;gcm.notification.title&quot;) : intentDst.getStringExtra(&quot;title&quot;); final String body = intentDst.getStringExtra(&quot;body&quot;) == null ? intentDst.getStringExtra(&quot;gcm.notification.body&quot;) : intentDst.getStringExtra(&quot;body&quot;); showNotification(title, body); } public void showNotification(String title, String message) { if( title != null || message != null ) { Context context = getApplicationContext(); showNotification(context, title, message); } } public static void showNotification(Context context, String title, String message) { final String CHANNEL_ID = &quot;MyChannelId&quot;; final int NOTIFICATION_ID = 1; NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE); // Create a notification channel for Android Oreo and above if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) { NotificationChannel channel = new NotificationChannel(CHANNEL_ID, &quot;Channel Name&quot;, NotificationManager.IMPORTANCE_DEFAULT); notificationManager.createNotificationChannel(channel); } // Create the notification NotificationCompat.Builder builder = new NotificationCompat.Builder(context, CHANNEL_ID) .setSmallIcon(R.drawable.arrow_point_to_right) .setContentTitle(title) .setContentText(message) .setAutoCancel(true); // Show the notification notificationManager.notify(NOTIFICATION_ID, builder.build()); // For Wovn only lastNotiTitle = title; lastNotiBody = message; } @Override public void onDeletedMessages() { /*Do nothing*/ } @Override public void onNewToken(@NonNull String token) { /*Do nothing*/ } } Correct small details like CHANNEL_ID, or Notification icon, and Wovn will translate all your notifications.  ","version":"Next","tagName":"h3"},{"title":"Testing the feature​","type":1,"pageTitle":"Wovn Push Notification Feature","url":"/WovnAppDocumentation/docs/English/Android/translate_push_notification#testing-the-feature","content":" We can send a push notification to the device via Firebase Cloud Messaging with the following data { &quot;to&quot;: &quot;{YOUR TESTING DEVICE FCM TOKEN}&quot;, &quot;notification&quot;: { &quot;title&quot;: &quot;こんにちは&quot;, &quot;body&quot;: &quot;素晴らしい日ですね！&quot; } } For the first time, your test device should receive a notification in Japanese. This is because Wovn does not have the translation for it yet. If you have allowed Wovn to report data, you should be able to find the title and body of the notification inside PushNotification screen in Wovn Dashboard After translating the 2 values, then click Save and publish, from the next time you send the same notification, it should be translated into the end-user language.  ","version":"Next","tagName":"h3"},{"title":"3. How to use Wovn to translate notification data containing sensitive user information​","type":1,"pageTitle":"Wovn Push Notification Feature","url":"/WovnAppDocumentation/docs/English/Android/translate_push_notification#3-how-to-use-wovn-to-translate-notification-data-containing-sensitive-user-information","content":" Instead of adding user data directly into the title or body of the notification, you can use %{variable_name}% instead, with its data inside data of the notification. { &quot;to&quot;: &quot;{YOUR TESTING DEVICE FCM TOKEN}&quot;, &quot;notification&quot;: { &quot;title&quot;: &quot;今月の請求書の準備ができました, %name%さん!&quot;, &quot;body&quot;: &quot;今月は%amount%円です。 %date%までにお支払いください&quot; }, &quot;data&quot;: { &quot;name&quot;: &quot;John Doe&quot;, &quot;amount&quot;: &quot;10000&quot;, &quot;date&quot;: &quot;2023/12/12&quot; } } Follow the same process when testing normal push notifications, your notifications with user-sensitive data can be translated too, without leaking any information.  ","version":"Next","tagName":"h2"},{"title":"4. How to use Wovn to translate local push notification​","type":1,"pageTitle":"Wovn Push Notification Feature","url":"/WovnAppDocumentation/docs/English/Android/translate_push_notification#4-how-to-use-wovn-to-translate-local-push-notification","content":" You can use Wovn.translateNotificationData to translate local push notification data before displaying it.  Map&lt;String, Object&gt; data = new HashMap&lt;&gt;(); data.put(&quot;name&quot;, &quot;John Doe&quot;); data.put(&quot;amount&quot;, 2468); data.put(&quot;duration&quot;, 31); String title = Wovn.translateNotificationData(&quot;こんにちは%name%さん。%amount%円の請求書があります&quot;, data); String body = Wovn.translateNotificationData(&quot;%amount%円を%duration%日以内にお支払いください&quot;, data); // Display local push notification code  ","version":"Next","tagName":"h2"},{"title":"Wovn SDK for Android - Public API Reference","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis","content":"","keywords":"","version":"Next"},{"title":"Initialization​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#initialization","content":" ","version":"Next","tagName":"h2"},{"title":"start(Context context, boolean isDebugMode)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#startcontext-context-boolean-isdebugmode","content":" Initializes the WOVN SDK with a given application context and debug mode flag. Note: Usually, WOVN can automatically get the application context. Use this method if it cannot.  Parameters:  context: The application context.isDebugMode: true to enable debug mode. Recommned using BuildConfig.DEBUG for this parameter for automatic debug mode detection.  Example:  Wovn.start(getApplicationContext(), BuildConfig.DEBUG);   ","version":"Next","tagName":"h3"},{"title":"start(boolean isDebugMode)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#startboolean-isdebugmode","content":" Initializes the WOVN SDK with the given debug mode flag.  Parameters:  isDebugMode: true to enable debug mode.  Example:  Wovn.start(BuildConfig.DEBUG);   ","version":"Next","tagName":"h3"},{"title":"View Translation​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#view-translation","content":" ","version":"Next","tagName":"h2"},{"title":"translateView(View view, String screen, WovnTranslateViewFunction callback) (Will be deprecated)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#translateviewview-view-string-screen-wovntranslateviewfunction-callback-will-be-deprecated","content":" Translates the given View to the current language. This is mainly useful if the SDK fails to automatically translate some views.  Parameters:  view: The view to translate.screen: The screen name corresponding to the translations.callback: A callback executed when translation completes.  Example:  Wovn.translateView(myView, &quot;MainScreen&quot;, new WovnTranslateViewFunction() { @Override public void onTranslated() { // Handle translation completion } });   ","version":"Next","tagName":"h3"},{"title":"translateView(View view, String screen)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#translateviewview-view-string-screen","content":" Same as above, but without a callback.  Parameters:  view: The view to translate.screen: The screen name.  Example:  Wovn.translateView(myView, &quot;MainScreen&quot;);   ","version":"Next","tagName":"h3"},{"title":"translateView(View view)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#translateviewview-view","content":" Translates the given View using the screen name from the context of the view.  Parameters:  view: The view to translate.  Example:  Wovn.translateView(myView);   ","version":"Next","tagName":"h3"},{"title":"translateView(View view, Activity activity, WovnTranslateViewFunction callback) (Will be deprecated)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#translateviewview-view-activity-activity-wovntranslateviewfunction-callback-will-be-deprecated","content":" Translates a View using the Activity to determine the screen name, with a callback.  Parameters:  view: The view to translate.activity: The activity providing the screen name.callback: Callback after translation completes.  Example:  Wovn.translateView(myView, myActivity, new WovnTranslateViewFunction() { @Override public void onTranslated() { // Handle completion } });   ","version":"Next","tagName":"h3"},{"title":"translateView(View view, Activity activity)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#translateviewview-view-activity-activity","content":" Translates a View using the Activity to determine the screen name, without a callback.  Parameters:  view: The view to translate.activity: The activity providing the screen name.  Example:  Wovn.translateView(myView, myActivity);   ","version":"Next","tagName":"h3"},{"title":"Alert Translation​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#alert-translation","content":" ","version":"Next","tagName":"h2"},{"title":"translateAlert(AlertDialog alertDialog)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#translatealertalertdialog-alertdialog","content":" Translates the given AlertDialog. Note that WOVN SDK will automatically translate most AlertDialogs but with very minor flicker. To avoid flicker, use this method before showing the dialog.  Parameters:  alertDialog: The alert dialog to translate.  Example:  AlertDialog dialog = new AlertDialog.Builder(context) .setTitle(&quot;Title&quot;) .setMessage(&quot;Message&quot;) .create(); Wovn.translateAlert(dialog); dialog.show();   ","version":"Next","tagName":"h3"},{"title":"Generic Translation Methods​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#generic-translation-methods","content":" ","version":"Next","tagName":"h2"},{"title":"translate(View view, Activity activity)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#translateview-view-activity-activity","content":" Translates the given View using the provided Activity to determine the screen name. Note that WOVN SDK will follow this View and automatically translate it when changes occurs like new child views added, or text changes.  Parameters:  view: The view to translate and follow.activity: The activity providing the screen name.  Example:  Wovn.translate(myView, myActivity);   ","version":"Next","tagName":"h3"},{"title":"translate(View view, String screenName)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#translateview-view-string-screenname","content":" Same as above, but with a specified screen name.  Parameters:  view: The view to translate.screenName: The screen name.  Example:  Wovn.translate(myView, &quot;MainScreen&quot;);   ","version":"Next","tagName":"h3"},{"title":"Language Management​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#language-management","content":" ","version":"Next","tagName":"h2"},{"title":"getCurrentLangCode()​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#getcurrentlangcode","content":" Gets the current language code, such as &quot;en&quot;, &quot;ja&quot;, or &quot;fr&quot;.  Returns: The current language code or null if not available.  Example:  String currentLang = Wovn.getCurrentLangCode();   ","version":"Next","tagName":"h3"},{"title":"changeLang(String lang)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#changelangstring-lang","content":" Changes the current language to the specified language code.  Parameters:  lang: The language code.  Example:  Wovn.changeLang(&quot;ja&quot;);   ","version":"Next","tagName":"h3"},{"title":"changeLang(String lang, WovnLangChangeCallback callback) (Will be deprecated)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#changelangstring-lang-wovnlangchangecallback-callback-will-be-deprecated","content":" Changes the current language and executes a callback when the operation is complete.  Parameters:  lang: The language code.callback: A callback for completion.  Example:  Wovn.changeLang(&quot;fr&quot;, new WovnLangChangeCallback() { @Override public void onChanged(String newLang) { // Handle language change completion } });   ","version":"Next","tagName":"h3"},{"title":"changeToSystemLang()​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#changetosystemlang","content":" Changes the current language to match the system’s default language.  Example:  Wovn.changeToSystemLang();   ","version":"Next","tagName":"h3"},{"title":"changeToSystemLang(WovnLangChangeCallback callback) (Will be deprecated)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#changetosystemlangwovnlangchangecallback-callback-will-be-deprecated","content":" Same as above, but includes a callback.  Parameters:  callback: A callback for completion.  Example:  Wovn.changeToSystemLang(new WovnLangChangeCallback() { @Override public void onChanged(String systemLang) { // Handle language change completion } });   ","version":"Next","tagName":"h3"},{"title":"Text Translation​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#text-translation","content":" ","version":"Next","tagName":"h2"},{"title":"translate(String src, String screenName)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#translatestring-src-string-screenname","content":" Translates a source text to the current language using a specified screen name.  Parameters:  src: The source text.screenName: The screen name.  Returns: The translated text.  Example:  String translated = Wovn.translate(&quot;Hello, World!&quot;, &quot;MainScreen&quot;);   ","version":"Next","tagName":"h3"},{"title":"translate(String src, String screenName, int timeoutMilliSec)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#translatestring-src-string-screenname-int-timeoutmillisec","content":" Same as translate(String, String), but with a timeout for waiting on WOVN readiness. Useful to waiting for WOVN to be ready at the start of the app.  Parameters:  src: The source text.screenName: The screen name.timeoutMilliSec: The maximum waiting time in milliseconds.  Returns: The translated text.  Example:  String translated = Wovn.translate(&quot;Hello, World!&quot;, &quot;MainScreen&quot;, 2000);   ","version":"Next","tagName":"h3"},{"title":"Status and Configuration​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#status-and-configuration","content":" ","version":"Next","tagName":"h2"},{"title":"getWovnStatus()​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#getwovnstatus","content":" Retrieves the current status of the WOVN SDK, including features, language settings, and reporting configurations.  Returns: WovnStatus object containing status information.  Example:  WovnStatus status = Wovn.getWovnStatus();   ","version":"Next","tagName":"h3"},{"title":"setWovnIgnore(View view, boolean ignore)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#setwovnignoreview-view-boolean-ignore","content":" Sets whether a view should be ignored during translation.  Parameters:  view: The view to configure.ignore: true to ignore the view.  Example:  Wovn.setWovnIgnore(myView, true);   ","version":"Next","tagName":"h3"},{"title":"getWovnIgnore(View view)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#getwovnignoreview-view","content":" Checks if a view is ignored during translation.  Parameters:  view: The view to check.  Returns: true if ignored, false otherwise.  Example:  boolean isIgnored = Wovn.getWovnIgnore(myView);   ","version":"Next","tagName":"h3"},{"title":"setUserPermission(WovnPermission permission, boolean enable)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#setuserpermissionwovnpermission-permission-boolean-enable","content":" Sets the permission for a specific feature of the SDK.  Parameters:  permission: The WovnPermission to set.enable: true to enable, false to disable.  Example:  Wovn.setUserPermission(WovnPermission.DATA_COLLECTION, true);   ","version":"Next","tagName":"h3"},{"title":"Notification Translation​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#notification-translation","content":" ","version":"Next","tagName":"h2"},{"title":"translateNotificationData(String src)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#translatenotificationdatastring-src","content":" Translates notification data (e.g., push notification text).  Parameters:  src: The original notification text.  Returns: Translated notification text.  Example:  String translatedNotification = Wovn.translateNotificationData(notificationMessage);   ","version":"Next","tagName":"h3"},{"title":"translateFirebaseNotificationIntent(Intent firebaseNotiIntent)​","type":1,"pageTitle":"Wovn SDK for Android - Public API Reference","url":"/WovnAppDocumentation/docs/English/Android/wovn_apis#translatefirebasenotificationintentintent-firebasenotiintent","content":" Translates keys like &quot;title&quot; and &quot;body&quot; in a Firebase notification Intent.  Parameters:  firebaseNotiIntent: The intent containing notification data.  Returns: An Intent with translated data.  Example:  Intent translatedIntent = Wovn.translateFirebaseNotificationIntent(intent);  ","version":"Next","tagName":"h3"},{"title":"WOVN KickStart Feature","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/English/iOS/kick_start","content":"","keywords":"","version":"Next"},{"title":"WOVN Data Priority​","type":1,"pageTitle":"WOVN KickStart Feature","url":"/WovnAppDocumentation/docs/English/iOS/kick_start#wovn-data-priority","content":" The WOVN SDK uses three sources for localization data, prioritized as follows:  API Data: Fetched directly from the WOVN API server.Highest priority and automatically cached for future use. Cache Data: Stored locally when API Data is fetched.Second highest priority. Kick Start Data: Pre-loaded localization data included in the application build.Lowest priority, used only when Cache Data and API Data are unavailable at the app’s startup.  ","version":"Next","tagName":"h2"},{"title":"Using the WOVN KickStart Feature​","type":1,"pageTitle":"WOVN KickStart Feature","url":"/WovnAppDocumentation/docs/English/iOS/kick_start#using-the-wovn-kickstart-feature","content":" If the wovn.kickstart file is included in the build, the SDK automatically attempts to load it when no Cache Data is available. You can generate and include the wovn.kickstart file using the wovn_sdk tool.  ","version":"Next","tagName":"h2"},{"title":"1. Download wovn.kickstart During SDK Setup​","type":1,"pageTitle":"WOVN KickStart Feature","url":"/WovnAppDocumentation/docs/English/iOS/kick_start#1-download-wovnkickstart-during-sdk-setup","content":" To automatically download the wovn.kickstart file during SDK setup, use the --with_kickstart option:  wovn_sdk setup --platform=iOS --project_path=./path/to/the/iOS/project.xcodeproj --sdk_version=latest --with_kickstart --with_string_resources -y   ","version":"Next","tagName":"h3"},{"title":"2. Download wovn.kickstart After SDK Setup​","type":1,"pageTitle":"WOVN KickStart Feature","url":"/WovnAppDocumentation/docs/English/iOS/kick_start#2-download-wovnkickstart-after-sdk-setup","content":" If you need to fetch or update the wovn.kickstart file after the SDK setup, use the following command. It’s recommended to run this before building or releasing the application:  wovn_sdk setup --platform=iOS --project_path=./path/to/the/iOS/project.xcodeproj  ","version":"Next","tagName":"h3"},{"title":"Protect User Privacy","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/English/iOS/protect_user_privacy","content":"","keywords":"","version":"Next"},{"title":"1. Debug Mode with Limit Reporting to Only App Operator​","type":1,"pageTitle":"Protect User Privacy","url":"/WovnAppDocumentation/docs/English/iOS/protect_user_privacy#1-debug-mode-with-limit-reporting-to-only-app-operator","content":" Follow the instructions in the WOVN Debug Mode document to enable Debug Mode.Limit reporting to only app operator is enabled by default. For changes to this behavior, please contact WOVN support.  Note: This approach is highly recommended for its simplicity. It guarantees 100% user privacy while enabling other development and testing features.  ","version":"Next","tagName":"h2"},{"title":"2. Wovn.setWovnIgnore​","type":1,"pageTitle":"Protect User Privacy","url":"/WovnAppDocumentation/docs/English/iOS/protect_user_privacy#2-wovnsetwovnignore","content":" To exclude sensitive information from translation, you can add targetView.wovn.ignore = true . This allows you to specify which views should not be translated.  Note: It is recommended to call targetView.wovn.ignore = true before the view is added to the screen, ideally before viewDidLoad method of the ViewController. This to ensure that the view is not translated when it is first displayed.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Protect User Privacy","url":"/WovnAppDocumentation/docs/English/iOS/protect_user_privacy#example","content":" targetView.wovn.ignore = true print(targetView.wovn.ignore)  ","version":"Next","tagName":"h3"},{"title":"Translate Text feature","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/English/iOS/manual_translation_for_view_and_texts","content":"","keywords":"","version":"Next"},{"title":"Translate Views​","type":1,"pageTitle":"Translate Text feature","url":"/WovnAppDocumentation/docs/English/iOS/manual_translation_for_view_and_texts#translate-views","content":" To translate a View, use the Wovn.translateView(ViewToTranslate_View, ScreenName_String) method. This method translates the text of the specified View and updates the View with the translated text. Note that after calling this method, WOVN SDK will follow ViewToTranslate_View and automatically translate it if something changes.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Translate Text feature","url":"/WovnAppDocumentation/docs/English/iOS/manual_translation_for_view_and_texts#example","content":" Wovn.changeLang(&quot;ja&quot;); notAutoTranslatedView1 = UITextView() notAutoTranslatedView1.text = &quot;This is a sample TextView in iOS.&quot; Wovn.translateView(notAutoTranslatedView1, &quot;ScreenName&quot;); print(notAutoTranslatedView1.text) // -&gt; これは、iOS のサンプル TextView です。 TextView notAutoTranslatedView2 = findViewById(R.id.not_auto_translated_text_view_2); notAutoTranslatedView2.text = &quot;This is a sample TextView in iOS too!&quot; Wovn.translateView(notAutoTranslatedView2, currentViewController); print(notAutoTranslatedView2.text) // -&gt; これも iOS のサンプル TextView です。 notAutoTranslatedView2.setText(&quot;This text will be translated by WOVN SDK automatically without calling Wovn.translateView again!&quot;); print(notAutoTranslatedView2.text) // -&gt; このテキストは、Wovn.translate を再度呼び出さなくても、WOVN SDK によって自動的に翻訳されます。   ","version":"Next","tagName":"h3"},{"title":"Translate Texts​","type":1,"pageTitle":"Translate Text feature","url":"/WovnAppDocumentation/docs/English/iOS/manual_translation_for_view_and_texts#translate-texts","content":" To translate a text directly, use the Wovn.translate(TextToTranslate_String, ScreenName_String) method. This method translates the specified text and returns the translated text.  Wovn.changeLang(&quot;ja&quot;); print(Wovn.translate(&quot;This text will be translated to the current language!&quot;, &quot;ScreenName&quot;)); // -&gt; このテキストは現在の言語に翻訳されます。  ","version":"Next","tagName":"h2"},{"title":"ユーザープライバシーの保護 (自動翻訳)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/Japanese/Android/protect_user_privacy","content":"","keywords":"","version":"Next"},{"title":"1. デバッグモードとアプリ運営者への報告制限​","type":1,"pageTitle":"ユーザープライバシーの保護 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/protect_user_privacy#1-デバッグモードとアプリ運営者への報告制限","content":" WOVN デバッグモード ドキュメントの指示に従ってデバッグモードを有効にします。アプリ運営者への報告制限 はデフォルトで有効になっています。この動作を変更する場合は、WOVN サポートにお問い合わせください。  注意： このアプローチはそのシンプルさから非常に推奨されます。開発およびテスト機能を有効にしながら、ユーザープライバシーを100％保証します。  ","version":"Next","tagName":"h2"},{"title":"2. Wovn.setWovnIgnore​","type":1,"pageTitle":"ユーザープライバシーの保護 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/protect_user_privacy#2-wovnsetwovnignore","content":" 機密情報を翻訳から除外するには、Wovn.setWovnIgnore メソッドを使用します。これにより、翻訳対象としないビューを指定することができます。  注意： Wovn.setWovnIgnore はビューが画面に追加される前、理想的には Activity の onCreate メソッド内で呼び出すことを推奨します。これにより、ビューが最初に表示される際に翻訳されないようにします。  ","version":"Next","tagName":"h2"},{"title":"例​","type":1,"pageTitle":"ユーザープライバシーの保護 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/protect_user_privacy#例","content":" Wovn.setWovnIgnore(viewWithSensitiveData, true);  ","version":"Next","tagName":"h3"},{"title":"テキスト翻訳機能 (自動翻訳)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/Japanese/Android/manual_translation_for_view_and_texts","content":"","keywords":"","version":"Next"},{"title":"View の翻訳​","type":1,"pageTitle":"テキスト翻訳機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/manual_translation_for_view_and_texts#view-の翻訳","content":" View を翻訳するには、Wovn.translate(ViewToTranslate_View, ScreenName_String) メソッドを使用します。このメソッドは指定された View のテキストを翻訳し、翻訳されたテキストで View を更新します。このメソッドを呼び出した後、WOVN SDK は ViewToTranslate_View を監視し、何かが変更された場合に自動的に翻訳を行います。  ","version":"Next","tagName":"h2"},{"title":"例​","type":1,"pageTitle":"テキスト翻訳機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/manual_translation_for_view_and_texts#例","content":" Wovn.changeLang(&quot;ja&quot;); TextView notAutoTranslatedView1 = findViewById(R.id.not_auto_translated_text_view_1); Wovn.translate(notAutoTranslatedView1, &quot;ScreenName&quot;); TextView notAutoTranslatedView2 = findViewById(R.id.not_auto_translated_text_view_2); Wovn.translate(notAutoTranslatedView2); // ScreenName は省略可能です。この場合、WOVN SDK は現在の Activity の名前を ScreenName として使用します。 // [some code] notAutoTranslatedView1.setText(&quot;This text will be translated by WOVN SDK automatically without calling Wovn.translate again!&quot;); Logger.d(notAutoTranslatedView1.getText().toString()); // -&gt; このテキストは、WOVN SDK によって Wovn.translate を再度呼び出さなくても自動的に翻訳されます。   ","version":"Next","tagName":"h3"},{"title":"テキストの翻訳​","type":1,"pageTitle":"テキスト翻訳機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/manual_translation_for_view_and_texts#テキストの翻訳","content":" テキストを直接翻訳するには、Wovn.translate(TextToTranslate_String, ScreenName_String) メソッドを使用します。このメソッドは指定されたテキストを翻訳し、翻訳されたテキストを返します。  Wovn.changeLang(&quot;ja&quot;); Logger.d(Wovn.translate(&quot;This text will be translated to the current language!&quot;, &quot;ScreenName&quot;)); // -&gt; このテキストは現在の言語に翻訳されます。  ","version":"Next","tagName":"h2"},{"title":"WOVN KickStart 機能 (自動翻訳)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/Japanese/Android/kick_start","content":"","keywords":"","version":"Next"},{"title":"WOVN データ優先順位​","type":1,"pageTitle":"WOVN KickStart 機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/kick_start#wovn-データ優先順位","content":" WOVN SDK はローカリゼーションデータを以下の3つのソースから使用し、優先順位は次の通りです：  API データ: WOVN API サーバーから直接取得。最も高い優先順位を持ち、将来の使用のために自動的にキャッシュされます。 キャッシュデータ: API データ を取得した際にローカルに保存。2番目に高い優先順位。 Kick Start データ: アプリケーションビルドに含まれる事前に読み込まれたローカリゼーションデータ。最も低い優先順位で、アプリ起動時に キャッシュデータ と API データ が利用できない場合にのみ使用されます。  ","version":"Next","tagName":"h2"},{"title":"WOVN KickStart 機能の使用方法​","type":1,"pageTitle":"WOVN KickStart 機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/kick_start#wovn-kickstart-機能の使用方法","content":" ビルドに wovn.kickstart ファイルが含まれている場合、キャッシュデータ が利用できないときに SDK が自動的にそれを読み込もうとします。wovn_sdk ツールを使用して wovn.kickstart ファイルを生成および含めることができます。  ","version":"Next","tagName":"h2"},{"title":"1. SDK セットアップ中に wovn.kickstart をダウンロード​","type":1,"pageTitle":"WOVN KickStart 機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/kick_start#1-sdk-セットアップ中に-wovnkickstart-をダウンロード","content":" SDK セットアップ中に自動的に wovn.kickstart ファイルをダウンロードするには、--with_kickstart オプションを使用します：  wovn_sdk setup --platform=Android --project_path=./path/to/the/Android/project --sdk_version=latest --with_kickstart --with_string_resources -y   ","version":"Next","tagName":"h3"},{"title":"2. SDK セットアップ後に wovn.kickstart をダウンロード​","type":1,"pageTitle":"WOVN KickStart 機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/kick_start#2-sdk-セットアップ後に-wovnkickstart-をダウンロード","content":" SDK セットアップ後に wovn.kickstart ファイルを取得または更新する必要がある場合は、以下のコマンドを使用します。アプリケーションのビルドやリリース前に実行することを推奨します：  wovn_sdk kickstart --platform=Android --project_path=./path/to/the/Android/project  ","version":"Next","tagName":"h3"},{"title":"WOVN Android SDK のインストールと設定方法 (自動翻訳)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/Japanese/Android/android_quick_start","content":"","keywords":"","version":"Next"},{"title":"1コマンドでの WOVN SDK インストール​","type":1,"pageTitle":"WOVN Android SDK のインストールと設定方法 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/android_quick_start#1コマンドでの-wovn-sdk-インストール","content":" 以下のコマンドを使うことで、WOVN Android SDK および必要な設定をまとめてインストールできます。なお、コマンドを実行するとプロジェクトに変更が加えられるため、実行前に必ず変更をコミットしておいてください。  export WOVN_PROJECT_TOKEN=wovn_project_token export WOVN_API_KEY=wovn_api_key export ANDROID_PROJECT_PATH=absolute_path_to_android_project export WOVN_CLI_VERSION=latest # または特定のバージョン bash &lt;(curl -fsSL https://raw.githubusercontent.com/WOVNio/WovnAppDocumentation/main/docs/English/Android/scripts/android_install_script.sh)   例:  export WOVN_PROJECT_TOKEN=WTOKEN export WOVN_API_KEY=eyJhbGciOiJIUzI1NiJ9.eyJwcm9qZWN0X3Rva2VuIjoiUjlFAKEvIiwidG9rZW5fdXVpZCI6IFAKETY3NTA1LWNjOWEtNDJiMS05N2YzLFAKEDA5YWIyYzJlZiJ9.BmeOFN78Qj-FAKETS16BVOFAKEwbqZgHZvYVxDjYriE export ANDROID_PROJECT_PATH=/Users/user/Documents/Projects/WovnAppRepos/Android/examples/wovn-android-demoapp export WOVN_CLI_VERSION=latest bash &lt;(curl -fsSL https://raw.githubusercontent.com/WOVNio/WovnAppDocumentation/main/docs/English/Android/scripts/android_install_script.sh)   ","version":"Next","tagName":"h2"},{"title":"コマンドの概要​","type":1,"pageTitle":"WOVN Android SDK のインストールと設定方法 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/android_quick_start#コマンドの概要","content":" 上記のコマンドを実行すると、以下のステップが行われます。  ","version":"Next","tagName":"h2"},{"title":"ステップ 1: WOVN CLI ツールのダウンロードとインストール​","type":1,"pageTitle":"WOVN Android SDK のインストールと設定方法 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/android_quick_start#ステップ-1-wovn-cli-ツールのダウンロードとインストール","content":" # 常に最新バージョンの WOVN CLI ツールを使用するようにします gem uninstall wovn_sdk --all --executables --ignore-dependencies # gem をダウンロード curl -o wovn_sdk.gem https://download.wovn.app/cli/$WOVN_CLI_VERSION/wovn_sdk.gem # gem をインストール gem install ./wovn_sdk.gem   ","version":"Next","tagName":"h3"},{"title":"ステップ 2: WOVN プロジェクトトークンと API Key を使用して wovn_sdk を設定​","type":1,"pageTitle":"WOVN Android SDK のインストールと設定方法 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/android_quick_start#ステップ-2-wovn-プロジェクトトークンと-api-key-を使用して-wovn_sdk-を設定","content":" このステップの後は、後続の wovn_sdk コマンドでトークンと API キーを指定する必要はありません。  wovn_sdk config --token={WOVN_PROJECT_TOKEN} --api_key={WOVN_API_KEY}   ","version":"Next","tagName":"h3"},{"title":"ステップ 3: wovn_sdk を使用して WOVN Android SDK をプロジェクトにインストール​","type":1,"pageTitle":"WOVN Android SDK のインストールと設定方法 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/android_quick_start#ステップ-3-wovn_sdk-を使用して-wovn-android-sdk-をプロジェクトにインストール","content":" wovn_sdk setup --platform=Android --project_path={absolute_path_to_android_project} --sdk_version=latest --with_kickstart --with_string_resources -y  ","version":"Next","tagName":"h3"},{"title":"アプリ情報における WOVN 設定画面 (自動翻訳)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/Japanese/Android/setup_wovn_settings_in_app_info","content":"","keywords":"","version":"Next"},{"title":"設定手順​","type":1,"pageTitle":"アプリ情報における WOVN 設定画面 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/setup_wovn_settings_in_app_info#設定手順","content":" WOVN 設定画面をアプリに統合するには、以下のコードを AndroidManifest.xml ファイルに追加してください。この設定により、アプリの「アプリ情報」セクションに事前設定された WOVN 設定画面が追加されます。  &lt;activity android:name=&quot;io.wovn.wovnapp.debugmode.WovnSettingsActivity&quot; android:label=&quot;翻訳設定&quot; android:exported=&quot;true&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.APPLICATION_PREFERENCES&quot; /&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt; &lt;/intent-filter&gt; &lt;/activity&gt;   ","version":"Next","tagName":"h2"},{"title":"デモンストレーション​","type":1,"pageTitle":"アプリ情報における WOVN 設定画面 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/setup_wovn_settings_in_app_info#デモンストレーション","content":" 以下のビデオで WOVN 設定画面の機能をプレビューできます：    ","version":"Next","tagName":"h2"},{"title":"注意事項​","type":1,"pageTitle":"アプリ情報における WOVN 設定画面 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/setup_wovn_settings_in_app_info#注意事項","content":" ユーザーは設定を変更するために 検証トークン フィールドに正しいトークンを入力する必要があります。これにより、権限のあるユーザーのみが変更を行えるようになります。 ","version":"Next","tagName":"h2"},{"title":"WOVN Settings Integration in the iOS Settings App","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/English/iOS/setup_wovn_settings_in_app_info","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"WOVN Settings Integration in the iOS Settings App","url":"/WovnAppDocumentation/docs/English/iOS/setup_wovn_settings_in_app_info#overview","content":" The WOVN Settings screen is a pre-configured interface embedded within the iOS Settings app. It allows users to manage translation-related settings for the app. The main feature is the isDebugMode toggle, which enables operator mode. When enabled, this mode increases the frequency of reporting and re-translations to every 10 seconds.  Additionally, the screen displays useful debugging information such as the reporting status, user ID, and other troubleshooting details.  ","version":"Next","tagName":"h2"},{"title":"Setup Instructions​","type":1,"pageTitle":"WOVN Settings Integration in the iOS Settings App","url":"/WovnAppDocumentation/docs/English/iOS/setup_wovn_settings_in_app_info#setup-instructions","content":" Follow these steps to integrate the WOVN Settings screen:  Add a Settings Bundle: If you haven't already, add a Settings Bundle to your project. This can be done by navigating to: File &gt; New &gt; File &gt; Settings Bundle Once added, the bundle will be included in your project structure. Modify Root.plist: In the Settings.Bundle folder, locate the Root.plist file.Add the following XML code to Root.plist. If the file already exists, copy only the section between &lt;!-- WOVN Settings section start --&gt; and &lt;!-- WOVN Settings section end --&gt;. &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt; &lt;plist version=&quot;1.0&quot;&gt; &lt;dict&gt; &lt;key&gt;StringsTable&lt;/key&gt; &lt;string&gt;Root&lt;/string&gt; &lt;key&gt;PreferenceSpecifiers&lt;/key&gt; &lt;array&gt; &lt;!-- WOVN Settings section start --&gt; &lt;dict&gt; &lt;key&gt;Type&lt;/key&gt; &lt;string&gt;PSGroupSpecifier&lt;/string&gt; &lt;key&gt;Title&lt;/key&gt; &lt;string&gt;Translation Settings&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Type&lt;/key&gt; &lt;string&gt;PSTextFieldSpecifier&lt;/string&gt; &lt;key&gt;Title&lt;/key&gt; &lt;string&gt;Validation Token&lt;/string&gt; &lt;key&gt;Key&lt;/key&gt; &lt;string&gt;verify_token&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Type&lt;/key&gt; &lt;string&gt;PSToggleSwitchSpecifier&lt;/string&gt; &lt;key&gt;Title&lt;/key&gt; &lt;string&gt;Debug Mode (Enable App Operator &amp;amp; reporting)&lt;/string&gt; &lt;key&gt;Key&lt;/key&gt; &lt;string&gt;debug_mode&lt;/string&gt; &lt;key&gt;DefaultValue&lt;/key&gt; &lt;false/&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Type&lt;/key&gt; &lt;string&gt;PSTitleValueSpecifier&lt;/string&gt; &lt;key&gt;DefaultValue&lt;/key&gt; &lt;string&gt;Run the app to update data&lt;/string&gt; &lt;key&gt;Title&lt;/key&gt; &lt;string&gt;Info&lt;/string&gt; &lt;key&gt;Key&lt;/key&gt; &lt;string&gt;debug_status&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Type&lt;/key&gt; &lt;string&gt;PSTextFieldSpecifier&lt;/string&gt; &lt;key&gt;Title&lt;/key&gt; &lt;string&gt;Other Settings (&amp;quot;key1=value1; key2=value2&amp;quot;)&lt;/string&gt; &lt;key&gt;Key&lt;/key&gt; &lt;string&gt;bulk_settings&lt;/string&gt; &lt;/dict&gt; &lt;!-- WOVN Settings section end --&gt; &lt;/array&gt; &lt;/dict&gt; &lt;/plist&gt; This code adds a section for WOVN Settings to the iOS Settings app. The WOVN SDK will then be able to read and apply the settings specified here.  ","version":"Next","tagName":"h2"},{"title":"Demonstration​","type":1,"pageTitle":"WOVN Settings Integration in the iOS Settings App","url":"/WovnAppDocumentation/docs/English/iOS/setup_wovn_settings_in_app_info#demonstration","content":" Here's a demonstration of the WOVN Settings screen integrated within the iOS Settings app:    ","version":"Next","tagName":"h2"},{"title":"Important Notes​","type":1,"pageTitle":"WOVN Settings Integration in the iOS Settings App","url":"/WovnAppDocumentation/docs/English/iOS/setup_wovn_settings_in_app_info#important-notes","content":" Token Verification: Users must enter the correct token in the Validation Token field. The SDK will only apply the settings if the token is valid. ","version":"Next","tagName":"h2"},{"title":"WOVN デバッグモード機能 (自動翻訳)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/Japanese/Android/debug_mode","content":"","keywords":"","version":"Next"},{"title":"機能概要​","type":1,"pageTitle":"WOVN デバッグモード機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/debug_mode#機能概要","content":" デバッグモードを有効にすると、App Operator Mode がアクティブになり、以下の利点が得られます：  迅速なレポート作成と再翻訳：アプリは約 10秒 ごとにデータを報告し、コンテンツを再翻訳します。これにより、開発中に迅速なフィードバックが可能になります。ユーザープライバシーの保護：Limit reporting to only app operator と組み合わせることで、デバッグモードはエンドユーザーデータが WOVN に送信されないようにします。    ","version":"Next","tagName":"h2"},{"title":"デバッグモードの有効化方法​","type":1,"pageTitle":"WOVN デバッグモード機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/debug_mode#デバッグモードの有効化方法","content":" デバッグモードは、プログラム的に、またはアプリ内の WOVN 設定画面を通じて有効化できます。  ","version":"Next","tagName":"h2"},{"title":"1. プログラムを通じてデバッグモードを有効にする​","type":1,"pageTitle":"WOVN デバッグモード機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/debug_mode#1-プログラムを通じてデバッグモードを有効にする","content":" コードを通じてデバッグモードを有効にするには、以下の関数を使用します：  public WovnActivityLifecycleCallbacks(boolean isDebugMode)   isDebugMode に true を渡すことで Debug Mode を有効にし、App Operator Mode に入ります。一般的な使用例としては、BuildConfig.DEBUG を使用してデバッグビルドのみで Debug Mode を有効にする方法があります。  Kotlin の例：  class MyApplication : Application() { override fun onCreate() { super.onCreate() this.registerActivityLifecycleCallbacks(WovnActivityLifecycleCallbacks(BuildConfig.DEBUG)) // BuildConfig.DEBUG に基づいて Debug Mode を有効にします } }   この方法は簡単ですが、通常は開発（デバッグ）ビルドと本番（リリース）ビルドを分けてビルドする必要があります。  ","version":"Next","tagName":"h3"},{"title":"2. WOVN 設定画面を通じてデバッグモードを有効にする​","type":1,"pageTitle":"WOVN デバッグモード機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/debug_mode#2-wovn-設定画面を通じてデバッグモードを有効にする","content":" 別の方法として、WOVN 設定画面を通じてデバッグモードを有効にすることができます。この設定画面の統合方法の詳細については、setup_wovn_settings_in_app_info.md ドキュメントを参照してください。  WOVN 設定画面がセットアップされたら、以下の手順に従ってデバッグモードを有効にします：  アプリの App Info 画面内の Translation Settings セクションに移動します。Validation Token フィールドに WOVN の token を入力します。Debug Mode スイッチをトグルして機能を有効にします。これでアプリは Debug Mode に入り、App Operator Mode がアクティブになり、翻訳の更新が迅速になり、レポート作成の頻度が増加します。 ","version":"Next","tagName":"h3"},{"title":"WOVN デバッグモード機能 (自動翻訳)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/Japanese/iOS/debug_mode","content":"","keywords":"","version":"Next"},{"title":"機能概要​","type":1,"pageTitle":"WOVN デバッグモード機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/debug_mode#機能概要","content":" デバッグモードを有効にすると、App Operator Mode がアクティブになり、以下の利点が得られます：  迅速なレポートと再翻訳： アプリは約 10 秒 ごとにデータをレポートし、コンテンツを再翻訳します。これにより、開発中のフィードバックが迅速に得られます。 ユーザープライバシーの保護： Limit reporting to only app operator と組み合わせることで、デバッグモードはエンドユーザーデータが WOVN に送信されないようにします。    ","version":"Next","tagName":"h2"},{"title":"デバッグモードの有効化方法​","type":1,"pageTitle":"WOVN デバッグモード機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/debug_mode#デバッグモードの有効化方法","content":" デバッグモードは、プログラム的にまたはアプリ内の WOVN 設定画面から有効にすることができます。  ","version":"Next","tagName":"h2"},{"title":"1. プログラム的にデバッグモードを有効にする​","type":1,"pageTitle":"WOVN デバッグモード機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/debug_mode#1-プログラム的にデバッグモードを有効にする","content":" アプリのコード内で直接デバッグモードを有効にするには、以下の関数を使用します：  public static func start(appGroupIdentifier: String? = nil, isDebugMode: Bool = false, autoTranslateUIKit: Bool = true)   isDebugMode に true を渡して Debug Mode を有効にし、App Operator Mode に入ります。一般的な使用例としては、デバッグビルドのみで Debug Mode を有効にする場合に _isDebugAssertConfiguration() を使用します。  class AppDelegate: UIResponder, UIApplicationDelegate, MessagingDelegate, UNUserNotificationCenterDelegate { func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool { Wovn.start(isDebugMode: _isDebugAssertConfiguration()) // デバッグビルドに基づいてデバッグモードを有効化 } }   この方法はシンプルですが、通常は開発（デバッグ）ビルドと本番（リリース）ビルドを別々に行う必要があります。  ","version":"Next","tagName":"h3"},{"title":"2. WOVN 設定画面からデバッグモードを有効にする​","type":1,"pageTitle":"WOVN デバッグモード機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/debug_mode#2-wovn-設定画面からデバッグモードを有効にする","content":" 代わりに、アプリ内の WOVN 設定画面を通じてデバッグモードを有効にすることもできます。WOVN 設定画面を統合してアクセスする方法については、setup_wovn_settings_in_app_info.md ドキュメントを参照してください。  WOVN 設定画面が設定されたら、以下の手順に従ってデバッグモードを有効にします：  アプリの App Info 画面内の Translation Settings セクションに移動します。Validation Token フィールドに WOVN の token を入力します。Debug Mode スイッチをトグルして機能を有効にします。アプリはデバッグモードに入り、App Operator Mode が有効になり、翻訳の更新が迅速になり、レポート頻度が高くなります。   ","version":"Next","tagName":"h3"},{"title":"WOVN KickStart 機能 (自動翻訳)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/Japanese/iOS/kick_start","content":"","keywords":"","version":"Next"},{"title":"WOVN データ優先順位​","type":1,"pageTitle":"WOVN KickStart 機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/kick_start#wovn-データ優先順位","content":" WOVN SDK はローカリゼーションデータを以下の3つのソースから使用し、優先順位は次の通りです：  API データ: WOVN API サーバーから直接取得。最も高い優先順位を持ち、将来の使用のために自動的にキャッシュされます。 キャッシュデータ: API データ を取得した際にローカルに保存。2番目に高い優先順位。 Kick Start データ: アプリケーションビルドに含まれる事前に読み込まれたローカリゼーションデータ。最も低い優先順位で、アプリ起動時に キャッシュデータ と API データ が利用できない場合にのみ使用されます。  ","version":"Next","tagName":"h2"},{"title":"WOVN KickStart 機能の使用方法​","type":1,"pageTitle":"WOVN KickStart 機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/kick_start#wovn-kickstart-機能の使用方法","content":" ビルドに wovn.kickstart ファイルが含まれている場合、キャッシュデータ が利用できないときに SDK が自動的にそれを読み込もうとします。wovn_sdk ツールを使用して wovn.kickstart ファイルを生成および含めることができます。  ","version":"Next","tagName":"h2"},{"title":"1. SDK セットアップ中に wovn.kickstart をダウンロード​","type":1,"pageTitle":"WOVN KickStart 機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/kick_start#1-sdk-セットアップ中に-wovnkickstart-をダウンロード","content":" SDK セットアップ中に自動的に wovn.kickstart ファイルをダウンロードするには、--with_kickstart オプションを使用します：  wovn_sdk setup --platform=iOS --project_path=./path/to/the/iOS/project.xcodeproj --sdk_version=latest --with_kickstart --with_string_resources -y   ","version":"Next","tagName":"h3"},{"title":"2. SDK セットアップ後に wovn.kickstart をダウンロード​","type":1,"pageTitle":"WOVN KickStart 機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/kick_start#2-sdk-セットアップ後に-wovnkickstart-をダウンロード","content":" SDK セットアップ後に wovn.kickstart ファイルを取得または更新する必要がある場合は、以下のコマンドを使用します。アプリケーションのビルドやリリース前に実行することを推奨します：  wovn_sdk setup --platform=iOS --project_path=./path/to/the/iOS/project.xcodeproj  ","version":"Next","tagName":"h3"},{"title":"WOVN プッシュ通知機能 (自動翻訳)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/Japanese/Android/translate_push_notification","content":"","keywords":"","version":"Next"},{"title":"概要​","type":1,"pageTitle":"WOVN プッシュ通知機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/translate_push_notification#概要","content":" このドキュメントでは、以下のことを学びます：  WOVN が通知をどのように翻訳できるかエンドユーザーに表示する前にサーバーからの通知データにアクセスし、翻訳するために WOVN を許可する方法敏感なユーザー情報を含む通知データを翻訳するために WOVN を使用する方法ローカルプッシュ通知を翻訳するために WOVN を使用する方法  ","version":"Next","tagName":"h2"},{"title":"詳細​","type":1,"pageTitle":"WOVN プッシュ通知機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/translate_push_notification#詳細","content":" ","version":"Next","tagName":"h2"},{"title":"1. WOVN が通知をどのように翻訳できるか​","type":1,"pageTitle":"WOVN プッシュ通知機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/translate_push_notification#1-wovn-が通知をどのように翻訳できるか","content":"   まず、テストデバイスにテストプッシュ通知を送信します。これにより、WOVN は通知データを WOVN ダッシュボードに報告し、翻訳できるようになります。WOVN ダッシュボードが通知データを翻訳した後、同じ通知を再度テストデバイスに送信して確認します。通知が翻訳されたことを確認したら、すべてのユーザーに通知を送信できます。  ","version":"Next","tagName":"h3"},{"title":"2. エンドユーザーに表示する前にサーバーからの通知データにアクセスし、翻訳するために WOVN を許可する方法​","type":1,"pageTitle":"WOVN プッシュ通知機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/translate_push_notification#2-エンドユーザーに表示する前にサーバーからの通知データにアクセスし翻訳するために-wovn-を許可する方法","content":" FirebaseMessagingService を拡張してカスタムロジックを追加していない場合は、このドキュメント に従って拡張してください。 FirebaseMessagingService を拡張したクラス内に以下のコードを追加します。WOVN およびその他の必要な依存関係をインポートすることを忘れないでください。 @Override public void handleIntent(Intent intentSrc) { Intent intentDst = Wovn.translateFirebaseNotificationIntent(intentSrc); final String title = intentDst.getStringExtra(&quot;title&quot;) == null ? intentDst.getStringExtra(&quot;gcm.notification.title&quot;) : intentDst.getStringExtra(&quot;title&quot;); final String body = intentDst.getStringExtra(&quot;body&quot;) == null ? intentDst.getStringExtra(&quot;gcm.notification.body&quot;) : intentDst.getStringExtra(&quot;body&quot;); showNotification(title, body); } public void showNotification(String title, String message) { if( title != null || message != null ) { Context context = getApplicationContext(); showNotification(context, title, message); } } public static void showNotification(Context context, String title, String message) { final String CHANNEL_ID = &quot;MyChannelId&quot;; final int NOTIFICATION_ID = 1; NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE); // Android Oreo 以降用の通知チャンネルを作成 if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) { NotificationChannel channel = new NotificationChannel(CHANNEL_ID, &quot;Channel Name&quot;, NotificationManager.IMPORTANCE_DEFAULT); notificationManager.createNotificationChannel(channel); } // 通知を作成 NotificationCompat.Builder builder = new NotificationCompat.Builder(context, CHANNEL_ID) .setSmallIcon(R.drawable.arrow_point_to_right) .setContentTitle(title) .setContentText(message) .setAutoCancel(true); // 通知を表示 notificationManager.notify(NOTIFICATION_ID, builder.build()); // WOVN 用 lastNotiTitle = title; lastNotiBody = message; } ステップ2の後、ファイルは以下のようになります： package io.wovn.app.demo.activities; import android.app.NotificationChannel; import android.app.NotificationManager; import android.content.Context; import android.content.Intent; import android.os.Build; import androidx.annotation.NonNull; import androidx.core.app.NotificationCompat; import com.google.firebase.messaging.FirebaseMessagingService; import com.google.firebase.messaging.RemoteMessage; import io.wovn.app.demo.R; import io.wovn.wovnapp.Wovn; public class WovnFirebaseMessagingService extends FirebaseMessagingService { public static String lastNotiTitle = &quot;&quot;; public static String lastNotiBody = &quot;&quot;; @Override public void onMessageReceived(@NonNull RemoteMessage remoteMessage) { // この関数は handleIntent をオーバーライドしているため呼び出されません } @Override public void handleIntent(Intent intentSrc) { Intent intentDst = Wovn.translateFirebaseNotificationIntent(intentSrc); final String title = intentDst.getStringExtra(&quot;title&quot;) == null ? intentDst.getStringExtra(&quot;gcm.notification.title&quot;) : intentDst.getStringExtra(&quot;title&quot;); final String body = intentDst.getStringExtra(&quot;body&quot;) == null ? intentDst.getStringExtra(&quot;gcm.notification.body&quot;) : intentDst.getStringExtra(&quot;body&quot;); showNotification(title, body); } public void showNotification(String title, String message) { if( title != null || message != null ) { Context context = getApplicationContext(); showNotification(context, title, message); } } public static void showNotification(Context context, String title, String message) { final String CHANNEL_ID = &quot;MyChannelId&quot;; final int NOTIFICATION_ID = 1; NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE); // Android Oreo 以降用の通知チャンネルを作成 if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) { NotificationChannel channel = new NotificationChannel(CHANNEL_ID, &quot;Channel Name&quot;, NotificationManager.IMPORTANCE_DEFAULT); notificationManager.createNotificationChannel(channel); } // 通知を作成 NotificationCompat.Builder builder = new NotificationCompat.Builder(context, CHANNEL_ID) .setSmallIcon(R.drawable.arrow_point_to_right) .setContentTitle(title) .setContentText(message) .setAutoCancel(true); // 通知を表示 notificationManager.notify(NOTIFICATION_ID, builder.build()); // WOVN 用 lastNotiTitle = title; lastNotiBody = message; } @Override public void onDeletedMessages() { /* 何もしない */ } @Override public void onNewToken(@NonNull String token) { /* 何もしない */ } } CHANNEL_ID や Notification icon などの小さな詳細を修正すると、WOVN はすべての通知を翻訳します。  ","version":"Next","tagName":"h3"},{"title":"機能のテスト​","type":1,"pageTitle":"WOVN プッシュ通知機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/translate_push_notification#機能のテスト","content":" 以下のデータを使用して、Firebase Cloud Messaging 経由でデバイスにプッシュ通知を送信できます。 { &quot;to&quot;: &quot;{YOUR TESTING DEVICE FCM TOKEN}&quot;, &quot;notification&quot;: { &quot;title&quot;: &quot;こんにちは&quot;, &quot;body&quot;: &quot;素晴らしい日ですね！&quot; } } 初回は、テストデバイスが日本語の通知を受け取るはずです。これは WOVN がまだその翻訳を持っていないためです。WOVN にデータの報告を許可している場合、通知のタイトルと本文は WOVN ダッシュボードの PushNotification 画面内で確認できます。 2つの値を翻訳した後、Save and publish をクリックすると、次回同じ通知を送信した際にエンドユーザーの言語に翻訳されるはずです。  ","version":"Next","tagName":"h3"},{"title":"3. 敏感なユーザー情報を含む通知データを翻訳するために WOVN を使用する方法​","type":1,"pageTitle":"WOVN プッシュ通知機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/translate_push_notification#3-敏感なユーザー情報を含む通知データを翻訳するために-wovn-を使用する方法","content":" 通知の title や body に直接ユーザーデータを追加する代わりに、%{variable_name}% を使用し、データを通知の data 内に含めることができます。 { &quot;to&quot;: &quot;{YOUR TESTING DEVICE FCM TOKEN}&quot;, &quot;notification&quot;: { &quot;title&quot;: &quot;今月の請求書の準備ができました, %name%さん!&quot;, &quot;body&quot;: &quot;今月は%amount%円です。 %date%までにお支払いください&quot; }, &quot;data&quot;: { &quot;name&quot;: &quot;John Doe&quot;, &quot;amount&quot;: &quot;10000&quot;, &quot;date&quot;: &quot;2023/12/12&quot; } } 通常のプッシュ通知をテストする際と同じプロセスに従い、ユーザーの機密データを含む通知も情報漏洩せずに翻訳できます。  ","version":"Next","tagName":"h2"},{"title":"4. ローカルプッシュ通知を翻訳するために WOVN を使用する方法​","type":1,"pageTitle":"WOVN プッシュ通知機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/translate_push_notification#4-ローカルプッシュ通知を翻訳するために-wovn-を使用する方法","content":" Wovn.translateNotificationData を使用して、ローカルプッシュ通知データを表示前に翻訳できます。  Map&lt;String, Object&gt; data = new HashMap&lt;&gt;(); data.put(&quot;name&quot;, &quot;John Doe&quot;); data.put(&quot;amount&quot;, 2468); data.put(&quot;duration&quot;, 31); String title = Wovn.translateNotificationData(&quot;こんにちは%name%さん。%amount%円の請求書があります&quot;, data); String body = Wovn.translateNotificationData(&quot;%amount%円を%duration%日以内にお支払いください&quot;, data); // ローカルプッシュ通知を表示するコード  ","version":"Next","tagName":"h2"},{"title":"Wovn SDK for iOS - Public API Reference (Swift)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/English/iOS/wovn_apis","content":"","keywords":"","version":"Next"},{"title":"Table of Contents​","type":1,"pageTitle":"Wovn SDK for iOS - Public API Reference (Swift)","url":"/WovnAppDocumentation/docs/English/iOS/wovn_apis#table-of-contents","content":" translateNotificationContentgetCurrentLangCodechangeToSystemLangchangeLangtranslate (Text)getWovnStatustranslateView (UIView)translateView (UIView and UIViewController)translate (UINavigationItem)translate (UINavigationItem and UIViewController)startsetUserPermissionhasPermission  ","version":"Next","tagName":"h2"},{"title":"APIs​","type":1,"pageTitle":"Wovn SDK for iOS - Public API Reference (Swift)","url":"/WovnAppDocumentation/docs/English/iOS/wovn_apis#apis","content":" ","version":"Next","tagName":"h2"},{"title":"translateNotificationContent(notiContent: UNMutableNotificationContent) -> UNMutableNotificationContent​","type":1,"pageTitle":"Wovn SDK for iOS - Public API Reference (Swift)","url":"/WovnAppDocumentation/docs/English/iOS/wovn_apis#translatenotificationcontentnoticontent-unmutablenotificationcontent---unmutablenotificationcontent","content":" Translates the title, subtitle, and body fields of a UNMutableNotificationContent.  Parameters:  notiContent: The notification content to translate.  Returns: The same notification content instance with translated fields.  Example:  let translatedContent = Wovn.translateNotificationContent(notiContent: originalContent)   ","version":"Next","tagName":"h3"},{"title":"getCurrentLangCode(waitForInstance: Bool = true) -> String?​","type":1,"pageTitle":"Wovn SDK for iOS - Public API Reference (Swift)","url":"/WovnAppDocumentation/docs/English/iOS/wovn_apis#getcurrentlangcodewaitforinstance-bool--true---string","content":" Gets the current language code selected by the WOVN SDK.  Parameters:  waitForInstance: Whether to wait for the WOVN instance to be ready.  Returns: The current language code (e.g. &quot;en&quot;, &quot;ja&quot;) or nil if not available.  Example:  if let langCode = Wovn.getCurrentLangCode() { print(&quot;Current language code: \\(langCode)&quot;) }   ","version":"Next","tagName":"h3"},{"title":"changeToSystemLang(callback: ((String) -> Void)? = nil)​","type":1,"pageTitle":"Wovn SDK for iOS - Public API Reference (Swift)","url":"/WovnAppDocumentation/docs/English/iOS/wovn_apis#changetosystemlangcallback-string---void--nil","content":" Changes the current language to match the system’s default language.  Parameters:  callback: A closure that receives the new language code after the change completes. (to be deprecated)  Example:  Wovn.changeToSystemLang { newLang in print(&quot;Language changed to: \\(newLang)&quot;) }   ","version":"Next","tagName":"h3"},{"title":"changeLang(lang: String, callback: ((String) -> Void)? = nil)​","type":1,"pageTitle":"Wovn SDK for iOS - Public API Reference (Swift)","url":"/WovnAppDocumentation/docs/English/iOS/wovn_apis#changelanglang-string-callback-string---void--nil","content":" Changes the current language to the specified language code.  Parameters:  lang: The target language code.callback: A closure that receives the new language code after the change completes. (to be deprecated)  Example:  Wovn.changeLang(lang: &quot;fr&quot;)   ","version":"Next","tagName":"h3"},{"title":"translate(src: String, screenName: String) -> String​","type":1,"pageTitle":"Wovn SDK for iOS - Public API Reference (Swift)","url":"/WovnAppDocumentation/docs/English/iOS/wovn_apis#translatesrc-string-screenname-string---string","content":" Translates a given source text src using the translations for the specified screenName.  Parameters:  src: The source text.screenName: The screen name associated with the translations.  Returns: The translated text, or the original src if no translation is found.  Example:  let translatedText = Wovn.translate(src: &quot;Hello&quot;, screenName: &quot;MainScreen&quot;)   ","version":"Next","tagName":"h3"},{"title":"wovn_sdk CLI Documentation","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/English/WOVN CLI/overview","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"wovn_sdk CLI Documentation","url":"/WovnAppDocumentation/docs/English/WOVN CLI/overview#overview","content":" The wovn_sdk CLI simplifies setting up and managing WOVN SDK integrations for your iOS, Android, Flutter, and Xamarin projects. It provides a series of commands to configure SDK credentials, integrate WOVN into existing or new projects, and handle string resource extraction for translation.  ","version":"Next","tagName":"h2"},{"title":"Installation and Setup​","type":1,"pageTitle":"wovn_sdk CLI Documentation","url":"/WovnAppDocumentation/docs/English/WOVN CLI/overview#installation-and-setup","content":" Prerequisites: Ensure Ruby and Bundler are installed on your machine. Installation: You can download and install the latest wovn_sdk CLI by running: gem uninstall wovn_sdk --all --executables --ignore-dependencies curl -fSL -o wovn_sdk.gem &quot;https://download.wovn.app/cli/latest/wovn_sdk.gem&quot; gem install ./wovn_sdk.gem rm wovn_sdk.gem wovn_sdk help Note: gem uninstall wovn_sdk --all --executables --ignore-dependencies is to make sure the previous version is uninstalled.curl -fSL -o wovn_sdk.gem &quot;https://download.wovn.app/cli/latest/wovn_sdk.gem&quot; downloads the latest version of the CLI. You can replace latest with a specific version if needed (e.g., 0.2.0, latest_release_candidate, etc). Configuration: Before using the CLI, you need to configure it with your WOVN project token and API key. Run the following command to set up your credentials: wovn_sdk config --token={wovn_project_token} --api_key={wovn_api_key}   ","version":"Next","tagName":"h2"},{"title":"Commands​","type":1,"pageTitle":"wovn_sdk CLI Documentation","url":"/WovnAppDocumentation/docs/English/WOVN CLI/overview#commands","content":" ","version":"Next","tagName":"h2"},{"title":"1. config​","type":1,"pageTitle":"wovn_sdk CLI Documentation","url":"/WovnAppDocumentation/docs/English/WOVN CLI/overview#1-config","content":" Description: Configure the WOVN SDK with your project token and API key. This should be done before other steps that require authentication.  Usage:  wovn_sdk config --token=YOUR_PROJECT_TOKEN [--api_key=YOUR_API_KEY] [--profile=PROFILE_NAME]   Required Options:  --token=YOUR_PROJECT_TOKEN: Your WOVN project token (required).  Optional Options:  --api_key=YOUR_API_KEY: Your WOVN API key. This is optional but recommended for some operations.--profile=PROFILE_NAME: Specify a configuration profile (default: default).  What this does:  Authenticates with WOVN to allow for further SDK setup and resource management commands.  Example:  wovn_sdk config --token=T0K3NW --api_key=api_key_from_dashboard   ","version":"Next","tagName":"h3"},{"title":"2. setup​","type":1,"pageTitle":"wovn_sdk CLI Documentation","url":"/WovnAppDocumentation/docs/English/WOVN CLI/overview#2-setup","content":" Description: Integrate WOVN SDK into an existing project. This command can also optionally kickstart the project and handle string resource extraction if the respective flags are set.  Usage:  wovn_sdk setup --platform=PLATFORM [--profile=PROFILE_NAME] [--project_path=PROJECT_PATH] [--sdk_version=VERSION] [--project_targets=TARGETS]   Required Options:  --platform=PLATFORM: Specify the platform (iOS, Android, Flutter, Xamarin).--project_path=PROJECT_PATH: Path to your project file. For iOS, this should be the .xcodeproj file.  Optional Options:  --profile=PROFILE_NAME: Use a specific config profile. Defaults to default.--sdk_version=VERSION: WOVN SDK version to use (default: latest).--project_targets=TARGETS: (iOS only) Comma-separated list of targets. E.g. --project_targets=MyApp,MyAppTests.--with_kickstart: Enable the kickstart functionality after setting up the SDK.--with_string_resources: Enable string resources extraction and upload after setup.--auto_yes, -y: Automatically answer &quot;yes&quot; to all prompts (useful with --with_string_resources).--dry_run: Perform a dry run of string resource extraction without uploading (used with --with_string_resources).  What this does:  Integrates WOVN SDK into your existing project by adding necessary files, dependencies, and configurations.If --with_kickstart is provided, it will also run the kickstart logic.If --with_string_resources is provided, it will extract and handle string resources as per provided options.  Examples:  # Set up iOS project with default SDK version, no kickstart, no string resources wovn_sdk setup --platform=iOS --project_path=./MyApp.xcodeproj # Set up Android project with a specific SDK version and kickstart wovn_sdk setup --platform=Android --project_path=./MyAndroidApp --sdk_version=v3.6.0_rc1 --with_kickstart # Set up iOS project and run string resource extraction automatically with dry run wovn_sdk setup --platform=iOS --project_path=./MyApp.xcodeproj --with_string_resources --dry_run     ","version":"Next","tagName":"h3"},{"title":"3. kickstart​","type":1,"pageTitle":"wovn_sdk CLI Documentation","url":"/WovnAppDocumentation/docs/English/WOVN CLI/overview#3-kickstart","content":" Description: Kickstart a project, setting it up with WOVN SDK. Ideal for new projects or to quickly add necessary scaffolding.  Usage:  wovn_sdk kickstart --platform=PLATFORM [--project_path=PATH] [--profile=PROFILE_NAME]   Required Options:  --platform=PLATFORM: Either iOS or Android.--project_path=PATH: Path to the project (if already existing).  Optional Options:  --profile=PROFILE_NAME: Configuration profile to use (default: default).  What this does:  Creates or updates project files and integrates WOVN SDK, providing a quick start to develop with WOVN’s localization features.  Examples:  # Kickstart an iOS project wovn_sdk kickstart --platform=iOS --project_path=./MyApp.xcodeproj # Kickstart an Android project without specifying a project path (may create a template project) wovn_sdk kickstart --platform=Android --project_path=/path/to/MyAndroidApp     ","version":"Next","tagName":"h3"},{"title":"4. string_resources​","type":1,"pageTitle":"wovn_sdk CLI Documentation","url":"/WovnAppDocumentation/docs/English/WOVN CLI/overview#4-string_resources","content":" Description: Extract and optionally upload string resources for translation to WOVN. This command can be used independently or via setup with --with_string_resources.  Usage:  wovn_sdk string_resources --platform=PLATFORM --project_path=PATH [--profile=PROFILE_NAME] [--auto_yes] [--dry_run]   Required Options:  --platform=PLATFORM: iOS or Android.--project_path=PATH: Path to the project.  Optional Options:  --profile=PROFILE_NAME: Configuration profile (default: default).--auto_yes, -y: Automatically answer &quot;yes&quot; to prompts.--dry_run: Show extraction results without uploading.  What this does:  Scans your project’s resource files.Extracts found strings for translation.If --dry_run is not used, uploads them to WOVN for translation management.  Examples:  # Extract strings from Android project, show what would happen without uploading wovn_sdk string_resources --platform=Android --project_path=./MyAndroidApp --dry_run # Extract strings from iOS project and auto-confirm prompts wovn_sdk string_resources --platform=iOS --project_path=./MyApp.xcodeproj --auto_yes     ","version":"Next","tagName":"h3"},{"title":"5. version​","type":1,"pageTitle":"wovn_sdk CLI Documentation","url":"/WovnAppDocumentation/docs/English/WOVN CLI/overview#5-version","content":" Description: Displays the current version of the WOVN SDK CLI.  Usage:  wovn_sdk version   Example:  wovn_sdk version # Outputs: WOVN SDK CLI version X.Y.Z     ","version":"Next","tagName":"h3"},{"title":"6. help​","type":1,"pageTitle":"wovn_sdk CLI Documentation","url":"/WovnAppDocumentation/docs/English/WOVN CLI/overview#6-help","content":" Description: Displays help information for all commands or a specific command.  Usage:  wovn_sdk help [COMMAND]   Examples:  wovn_sdk help wovn_sdk help setup     ","version":"Next","tagName":"h3"},{"title":"Quick setup examples​","type":1,"pageTitle":"wovn_sdk CLI Documentation","url":"/WovnAppDocumentation/docs/English/WOVN CLI/overview#quick-setup-examples","content":" Install wovn_sdk and setup WOVN SDK into iOS and Android project using scripts Android (Refer to the Android Quick Start Guide for more details) export WOVN_PROJECT_TOKEN=wovn_project_token export WOVN_API_KEY=wovn_api_key export ANDROID_PROJECT_PATH=absolute_path_to_android_project export WOVN_CLI_VERSION=latest # or specific version bash &lt;(curl -fsSL https://raw.githubusercontent.com/WOVNio/WovnAppDocumentation/main/docs/English/Android/scripts/android_install_script.sh) Example: export WOVN_PROJECT_TOKEN=WTOKEN export WOVN_API_KEY=eyJhbGciOiJIUzI1NiJ9.eyJwcm9qZWN0X3Rva2VuIjoiUjlFAKEvIiwidG9rZW5fdXVpZCI6IFAKETY3NTA1LWNjOWEtNDJiMS05N2YzLFAKEDA5YWIyYzJlZiJ9.BmeOFN78Qj-FAKETS16BVOFAKEwbqZgHZvYVxDjYriE export ANDROID_PROJECT_PATH=/Users/user/Documents/Projects/WovnAppRepos/Android/examples/wovn-android-demoapp export WOVN_CLI_VERSION=latest bash &lt;(curl -fsSL https://raw.githubusercontent.com/WOVNio/WovnAppDocumentation/main/docs/English/Android/scripts/android_install_script.sh) iOS (Refer to the iOS Quick Start Guide for more details) export WOVN_PROJECT_TOKEN=wovn_project_token export WOVN_API_KEY=wovn_api_key export IOS_PROJECT_PATH=absolute_path_to_ios_project export IOS_PROJECT_TARGETS=ios_project_target1,ios_project_target2 # Optional, default is the same as project name export WOVN_CLI_VERSION=latest # or specific version bash &lt;(curl -fsSL https://raw.githubusercontent.com/WOVNio/WovnAppDocumentation/main/docs/English/iOS/scripts/ios_install_script.sh) Example: export WOVN_PROJECT_TOKEN=WTOKEN export WOVN_API_KEY=eyJhbGciOiJIUzI1NiJ9.eyJwcm9qZWN0X3Rva2VuIjoiUjlFAKEvIiwidG9rZW5fdXVpZCI6IFAKETY3NTA1LWNjOWEtNDJiMS05N2YzLFAKEDA5YWIyYzJlZiJ9.BmeOFN78Qj-FAKETS16BVOFAKEwbqZgHZvYVxDjYriE export IOS_PROJECT_PATH=/Users/user/Documents/Projects/WovnAppRepos/iOS/examples/wovn-ios-demoapp/wovn-ios-demoapp.xcodeproj export IOS_PROJECT_TARGETS=wovn-ios-demoapp,wovn-ios-demoappTests export WOVN_CLI_VERSION=latest bash &lt;(curl -fsSL https://raw.githubusercontent.com/WOVNio/WovnAppDocumentation/main/docs/English/iOS/scripts/ios_install_script.sh) export WOVN_PROJECT_TOKEN=WTOKEN export WOVN_API_KEY=eyJhbGciOiJIUzI1NiJ9.eyJwcm9qZWN0X3Rva2VuIjoiUjlFAKEvIiwidG9rZW5fdXVpZCI6IFAKETY3NTA1LWNjOWEtNDJiMS05N2YzLFAKEDA5YWIyYzJlZiJ9.BmeOFN78Qj-FAKETS16BVOFAKEwbqZgHZvYVxDjYriE export IOS_PROJECT_PATH=/Users/user/Documents/Projects/WovnAppRepos/iOS/examples/wovn-ios-demoapp/wovn-ios-demoapp.xcodeproj export WOVN_CLI_VERSION=latest bash &lt;(curl -fsSL https://raw.githubusercontent.com/WOVNio/WovnAppDocumentation/main/docs/English/iOS/scripts/ios_install_script.sh)  ","version":"Next","tagName":"h2"},{"title":"getWovnStatus() -> WovnStatus​","type":1,"pageTitle":"Wovn SDK for iOS - Public API Reference (Swift)","url":"/WovnAppDocumentation/docs/English/iOS/wovn_apis#getwovnstatus---wovnstatus","content":" Retrieves the current status of the WOVN SDK, including load status, data safety, permissions, and available languages.  Returns: A WovnStatus object containing detailed information about the SDK state.  Example:  let status = Wovn.getWovnStatus() print(&quot;SDK load status: \\(status.loadStatus)&quot;)   ","version":"Next","tagName":"h3"},{"title":"translateView(view: UIView, screenName: String? = nil, translationType: TranslationType = .translateView, completionHandler: @escaping () -> Void = {})​","type":1,"pageTitle":"Wovn SDK for iOS - Public API Reference (Swift)","url":"/WovnAppDocumentation/docs/English/iOS/wovn_apis#translateviewview-uiview-screenname-string--nil-translationtype-translationtype--translateview-completionhandler-escaping----void--","content":" Translates the given UIView to the current language. Optionally, specify a screen name and a translation type.  Parameters:  view: The view to translate.screenName: The screen name to retrieve translations from (optional).translationType: The type of translation (default is .translateView).completionHandler: Called after the translation completes. (to be deprecated)  Example:  Wovn.translateView(view: myView, screenName: &quot;MainScreen&quot;)   ","version":"Next","tagName":"h3"},{"title":"translateView(view: UIView, viewController: UIViewController, translationType: TranslationType = .translateView, completionHandler: @escaping () -> Void = {})​","type":1,"pageTitle":"Wovn SDK for iOS - Public API Reference (Swift)","url":"/WovnAppDocumentation/docs/English/iOS/wovn_apis#translateviewview-uiview-viewcontroller-uiviewcontroller-translationtype-translationtype--translateview-completionhandler-escaping----void--","content":" Translates a UIView by inferring the screen name from the specified UIViewController class name.  Parameters:  view: The view to translate.viewController: The view controller providing the screen name.translationType: The type of translation (default .translateView).completionHandler: Called after translation. (to be deprecated)  Example:  Wovn.translateView(view: myView, viewController: self)   ","version":"Next","tagName":"h3"},{"title":"translate(navigationItem: UINavigationItem, screenName: String? = nil, translationType: TranslationType = .translateView, completionHandler: @escaping () -> Void = {})​","type":1,"pageTitle":"Wovn SDK for iOS - Public API Reference (Swift)","url":"/WovnAppDocumentation/docs/English/iOS/wovn_apis#translatenavigationitem-uinavigationitem-screenname-string--nil-translationtype-translationtype--translateview-completionhandler-escaping----void--","content":" Translates the UINavigationItem titles and elements using the current language.  Parameters:  navigationItem: The navigation item to translate.screenName: (Optional) The screen name for translations.translationType: The type of translation (default .translateView).completionHandler: Called after translation completes. (to be deprecated)  Example:  Wovn.translate(navigationItem: myNavItem, screenName: &quot;DetailView&quot;)   ","version":"Next","tagName":"h3"},{"title":"translate(navigationItem: UINavigationItem, viewController: UIViewController, translationType: TranslationType = .translateView, completionHandler: @escaping () -> Void = {})​","type":1,"pageTitle":"Wovn SDK for iOS - Public API Reference (Swift)","url":"/WovnAppDocumentation/docs/English/iOS/wovn_apis#translatenavigationitem-uinavigationitem-viewcontroller-uiviewcontroller-translationtype-translationtype--translateview-completionhandler-escaping----void--","content":" Similar to the previous method, but infers the screen name from the UIViewController class name.  Parameters:  navigationItem: The navigation item to translate.viewController: The controller providing the screen name.translationType: The type of translation.completionHandler: Completion closure. (to be deprecated)  Example:  Wovn.translate(navigationItem: navigationItem, viewController: self)   ","version":"Next","tagName":"h3"},{"title":"start(appGroupIdentifier: String? = nil, isDebugMode: Bool = false, autoTranslateUIKit: Bool = true, isNotificationServiceEnv: Bool = false)​","type":1,"pageTitle":"Wovn SDK for iOS - Public API Reference (Swift)","url":"/WovnAppDocumentation/docs/English/iOS/wovn_apis#startappgroupidentifier-string--nil-isdebugmode-bool--false-autotranslateuikit-bool--true-isnotificationserviceenv-bool--false","content":" Initializes and configures the WOVN SDK. This method sets up translation data, configurations, and optionally swizzles UIKit methods for automatic translation.  Parameters:  appGroupIdentifier: Identifier for app groups (optional).isDebugMode: Enable debug mode for logging and testing. Recommended to use _isDebugAssertConfiguration() to enable debug mode only in debug builds.autoTranslateUIKit: Automatically translates UI elements by swizzling UIKit methods.isNotificationServiceEnv: If true, the SDK optimizes for notification translation environment.  Example:  Wovn.start( appGroupIdentifier: &quot;group.io.wovn.workbox&quot;, isDebugMode: _isDebugAssertConfiguration(), autoTranslateUIKit: true, isNotificationServiceEnv: false )   ","version":"Next","tagName":"h3"},{"title":"setUserPermission(permission: WovnPermission, enabled: Bool)​","type":1,"pageTitle":"Wovn SDK for iOS - Public API Reference (Swift)","url":"/WovnAppDocumentation/docs/English/iOS/wovn_apis#setuserpermissionpermission-wovnpermission-enabled-bool","content":" Sets the permission for a specific WOVN feature (e.g. reporting, error reporting).  Parameters:  permission: The WovnPermission type to set.enabled: true to enable the permission, false to disable it.  Example:  Wovn.setUserPermission(permission: .report, enabled: true)   ","version":"Next","tagName":"h3"},{"title":"hasPermission(permission: WovnPermission) -> Bool​","type":1,"pageTitle":"Wovn SDK for iOS - Public API Reference (Swift)","url":"/WovnAppDocumentation/docs/English/iOS/wovn_apis#haspermissionpermission-wovnpermission---bool","content":" Checks if a certain WOVN permission is currently enabled.  Parameters:  permission: The WovnPermission to check.  Returns: true if enabled, false otherwise.  Example:  let hasReportPermission = Wovn.hasPermission(permission: .report)  ","version":"Next","tagName":"h3"},{"title":"WOVN デバッグモード機能 (自動翻訳)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/Japanese/iOS/ios_quick_start","content":"","keywords":"","version":"Next"},{"title":"機能概要​","type":1,"pageTitle":"WOVN デバッグモード機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/ios_quick_start#機能概要","content":" デバッグモードを有効にすると、App Operator Mode がアクティブになり、以下の利点が得られます：  迅速なレポートと再翻訳： アプリは約 10 秒 ごとにデータをレポートし、コンテンツを再翻訳します。これにより、開発中のフィードバックが迅速に得られます。 ユーザープライバシーの保護： Limit reporting to only app operator と組み合わせることで、デバッグモードはエンドユーザーデータが WOVN に送信されないようにします。    ","version":"Next","tagName":"h2"},{"title":"デバッグモードの有効化方法​","type":1,"pageTitle":"WOVN デバッグモード機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/ios_quick_start#デバッグモードの有効化方法","content":" デバッグモードは、プログラム的にまたはアプリ内の WOVN 設定画面から有効にすることができます。  ","version":"Next","tagName":"h2"},{"title":"1. プログラム的にデバッグモードを有効にする​","type":1,"pageTitle":"WOVN デバッグモード機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/ios_quick_start#1-プログラム的にデバッグモードを有効にする","content":" アプリのコード内で直接デバッグモードを有効にするには、以下の関数を使用します：  public static func start(appGroupIdentifier: String? = nil, isDebugMode: Bool = false, autoTranslateUIKit: Bool = true)   isDebugMode に true を渡して Debug Mode を有効にし、App Operator Mode に入ります。一般的な使用例としては、デバッグビルドのみで Debug Mode を有効にする場合に _isDebugAssertConfiguration() を使用します。  class AppDelegate: UIResponder, UIApplicationDelegate, MessagingDelegate, UNUserNotificationCenterDelegate { func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool { Wovn.start(isDebugMode: _isDebugAssertConfiguration()) // デバッグビルドに基づいてデバッグモードを有効化 } }   この方法はシンプルですが、通常は開発（デバッグ）ビルドと本番（リリース）ビルドを別々に行う必要があります。  ","version":"Next","tagName":"h3"},{"title":"2. WOVN 設定画面からデバッグモードを有効にする​","type":1,"pageTitle":"WOVN デバッグモード機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/ios_quick_start#2-wovn-設定画面からデバッグモードを有効にする","content":" 代わりに、アプリ内の WOVN 設定画面を通じてデバッグモードを有効にすることもできます。WOVN 設定画面を統合してアクセスする方法については、setup_wovn_settings_in_app_info.md ドキュメントを参照してください。  WOVN 設定画面が設定されたら、以下の手順に従ってデバッグモードを有効にします：  アプリの App Info 画面内の Translation Settings セクションに移動します。Validation Token フィールドに WOVN の token を入力します。Debug Mode スイッチをトグルして機能を有効にします。アプリはデバッグモードに入り、App Operator Mode が有効になり、翻訳の更新が迅速になり、レポート頻度が高くなります。   ","version":"Next","tagName":"h3"},{"title":"Wovn Push Notification Feature","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/English/iOS/translate_push_notification","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Wovn Push Notification Feature","url":"/WovnAppDocumentation/docs/English/iOS/translate_push_notification#overview","content":" In this document, you will learn:  How Wovn can translate your notificationHow to allow Wovn to access and then translate notification data from the server before showing it to the end userHow to use Wovn to translate notification data containing sensitive user informationHow to use Wovn to translate local push notification  ","version":"Next","tagName":"h2"},{"title":"Detail​","type":1,"pageTitle":"Wovn Push Notification Feature","url":"/WovnAppDocumentation/docs/English/iOS/translate_push_notification#detail","content":" ","version":"Next","tagName":"h2"},{"title":"1. How Wovn can translate your notification​","type":1,"pageTitle":"Wovn Push Notification Feature","url":"/WovnAppDocumentation/docs/English/iOS/translate_push_notification#1-how-wovn-can-translate-your-notification","content":"   First, send a test push notification to your test device. This will allow Wovn to report the notification data to Wovn Dashboard and translate it.After Wovn Dashboard translated the notification data, send the same notification again to your test device to confirm.After confirming the notification has been translated, you can send it to all your users.  ","version":"Next","tagName":"h3"},{"title":"2. How to allow Wovn to access and then translate notification data from the server before showing it to the end user​","type":1,"pageTitle":"Wovn Push Notification Feature","url":"/WovnAppDocumentation/docs/English/iOS/translate_push_notification#2-how-to-allow-wovn-to-access-and-then-translate-notification-data-from-the-server-before-showing-it-to-the-end-user","content":" In your server, make sure to add &quot;mutable_content&quot;: true to all push notifications. Without it, Apple will assume your notification will need no further editing and will display it without allowing any process to make any modification. If you haven’t extended UNNotificationServiceExten, to add custom logic, please do so by following this document by Apple: https://developer.apple.com/documentation/usernotifications/unnotificationserviceextension Since UNNotificationServiceExtension and your app run in separate sandboxes, we need to create a bridge to share data between them. We will use App Groups to do it: Add group.io.wovn.workbox to App Groups of your main app. wovn-ios-demoapp in this example. Add group.io.wovn.workbox to App Groups of your Notification Service Extension. Notify Wovn SDK in both the main app and UNNotificationServiceExtension about the App Groups group.io.wovn.workbox. Then translate push notifications. In AppDelegate.swift, change the Wovn.start's code parameters of appGroupIdentifier to &quot;group.io.wovn.workbox&quot;, and isNotificationServiceEnv to false. Example: Wovn.start(appGroupIdentifier: &quot;group.io.wovn.workbox&quot;, isNotificationServiceEnv: false) func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool { // Some application code // [BEFORE] // Wovn.start(isDebugMode: _isDebugAssertConfiguration(), autoTranslateUIKit: true) // [AFTER] Wovn.start( appGroupIdentifier: &quot;group.io.wovn.workbox&quot;, isDebugMode: _isDebugAssertConfiguration(), autoTranslateUIKit: true, isNotificationServiceEnv: false ) // Some wovn code // Some other application code } Add the following code to NotificationService.swift in the UNNotificationServiceExtension folder. import UserNotifications import WOVNswift class NotificationService: UNNotificationServiceExtension { var contentHandler: ((UNNotificationContent) -&gt; Void)? var bestAttemptContent: UNMutableNotificationContent? override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -&gt; Void) { Wovn.start(appGroupIdentifier: &quot;group.io.wovn.workbox&quot;, isNotificationServiceEnv: true) self.contentHandler = contentHandler bestAttemptContent = (request.content.mutableCopy() as? UNMutableNotificationContent) if let bestAttemptContent = bestAttemptContent { let translatedContent = Wovn.translateNotificationContent(notiContent: bestAttemptContent) contentHandler(translatedContent) } } override func serviceExtensionTimeWillExpire() { // Called just before the extension will be terminated by the system. // Use this as an opportunity to deliver your &quot;best attempt&quot; at modified content, otherwise the original push payload will be used. if let contentHandler = contentHandler, let bestAttemptContent = bestAttemptContent { contentHandler(bestAttemptContent) } } } After step 4, your push notification content is translated, and stored in translatedContent. In the code above, we just go ahead and display it. But you can customize it further before showing it to the end user.  ","version":"Next","tagName":"h3"},{"title":"Testing the feature​","type":1,"pageTitle":"Wovn Push Notification Feature","url":"/WovnAppDocumentation/docs/English/iOS/translate_push_notification#testing-the-feature","content":" We can send a push notification to the device via Firebase Cloud Messaging with the following data { &quot;to&quot;: &quot;{YOUR TESTING DEVICE FCM TOKEN}&quot;, &quot;notification&quot;: { &quot;mutable_content&quot;: true, // Don't forget this line &quot;title&quot;: &quot;こんにちは&quot;, &quot;body&quot;: &quot;素晴らしい日ですね！&quot; } } For the first time, your test device should receive a notification in Japanese. This is because Wovn does not have the translation for it yet. If you have allowed Wovn to report data, you should be able to find the title and body of the notification inside PushNotification screen in Wovn Dashboard After translating the 2 values, then click Save and publish, from the next time you send the same notification, it should be translated into the end-user language.  ","version":"Next","tagName":"h3"},{"title":"3. How to use Wovn to translate notification data containing sensitive user information​","type":1,"pageTitle":"Wovn Push Notification Feature","url":"/WovnAppDocumentation/docs/English/iOS/translate_push_notification#3-how-to-use-wovn-to-translate-notification-data-containing-sensitive-user-information","content":" Instead of adding user data directly into the title or body of the notification, you can use %{variable_name}% instead, with its data inside data of the notification. { &quot;to&quot;: &quot;{YOUR TESTING DEVICE FCM TOKEN}&quot;, &quot;notification&quot;: { &quot;mutable_content&quot;: true, // Don't forget this line &quot;title&quot;: &quot;今月の請求書の準備ができました, %name%さん!&quot;, &quot;body&quot;: &quot;今月は%amount%円です。 %date%までにお支払いください&quot; }, &quot;data&quot;: { &quot;name&quot;: &quot;John Doe&quot;, &quot;amount&quot;: &quot;10000&quot;, &quot;date&quot;: &quot;2023/12/12&quot; } } Follow the same process when testing normal push notifications, your notifications with user-sensitive data can be translated too, without leaking any information.  ","version":"Next","tagName":"h2"},{"title":"4. How to use Wovn to translate local push notification​","type":1,"pageTitle":"Wovn Push Notification Feature","url":"/WovnAppDocumentation/docs/English/iOS/translate_push_notification#4-how-to-use-wovn-to-translate-local-push-notification","content":" You can use Wovn.translateNotificationData to translate local push notification data before displaying it.  var content = UNMutableNotificationContent() content.title = &quot;こんにちは%name%さん&quot; content.subtitle = &quot;お金を払ってください.%amount%ドルです&quot; content.body = &quot;期限内にお支払いをお願いいたします。%amount%ドルです&quot; content.userInfo.updateValue(&quot;Jone Doe&quot;, forKey: &quot;name&quot;) content.userInfo.updateValue(&quot;150&quot;, forKey: &quot;amount&quot;) content.userInfo.updateValue(&quot;2099/12/12&quot;, forKey: &quot;date&quot;) content.sound = UNNotificationSound.default content = Wovn.translateNotificationContent(notiContent: content) // Display local push notification code  ","version":"Next","tagName":"h2"},{"title":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis","content":"","keywords":"","version":"Next"},{"title":"初期化​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#初期化","content":" ","version":"Next","tagName":"h2"},{"title":"start(Context context, boolean isDebugMode)​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#startcontext-context-boolean-isdebugmode","content":" 指定されたアプリケーションコンテキストとデバッグモードフラグで WOVN SDK を初期化します。 注意: 通常、WOVN は自動的にアプリケーションコンテキストを取得できます。このメソッドは取得できない場合に使用してください。  パラメータ:  context: アプリケーションコンテキスト。isDebugMode: デバッグモードを有効にする場合は true。このパラメータには自動デバッグモード検出のために BuildConfig.DEBUG の使用を推奨します。  例:  Wovn.start(getApplicationContext(), BuildConfig.DEBUG);   ","version":"Next","tagName":"h3"},{"title":"start(boolean isDebugMode)​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#startboolean-isdebugmode","content":" 指定されたデバッグモードフラグで WOVN SDK を初期化します。  パラメータ:  isDebugMode: デバッグモードを有効にする場合は true。  例:  Wovn.start(BuildConfig.DEBUG);   ","version":"Next","tagName":"h3"},{"title":"ビューの翻訳​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#ビューの翻訳","content":" ","version":"Next","tagName":"h2"},{"title":"translateView(View view, String screen, WovnTranslateViewFunction callback) （廃止予定）​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#translateviewview-view-string-screen-wovntranslateviewfunction-callback-廃止予定","content":" 指定された View を現在の言語に翻訳します。SDK が自動的に一部のビューを翻訳できない場合に主に有用です。  パラメータ:  view: 翻訳するビュー。screen: 翻訳に対応する画面名。callback: 翻訳完了時に実行されるコールバック。  例:  Wovn.translateView(myView, &quot;MainScreen&quot;, new WovnTranslateViewFunction() { @Override public void onTranslated() { // 翻訳完了の処理 } });   ","version":"Next","tagName":"h3"},{"title":"translateView(View view, String screen)​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#translateviewview-view-string-screen","content":" 上記と同様ですが、コールバックはありません。  パラメータ:  view: 翻訳するビュー。screen: 画面名。  例:  Wovn.translateView(myView, &quot;MainScreen&quot;);   ","version":"Next","tagName":"h3"},{"title":"translateView(View view)​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#translateviewview-view","content":" ビューのコンテキストから画面名を取得して指定された View を翻訳します。  パラメータ:  view: 翻訳するビュー。  例:  Wovn.translateView(myView);   ","version":"Next","tagName":"h3"},{"title":"translateView(View view, Activity activity, WovnTranslateViewFunction callback) （廃止予定）​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#translateviewview-view-activity-activity-wovntranslateviewfunction-callback-廃止予定","content":" アクティビティを使用して画面名を決定し、コールバック付きでビューを翻訳します。  パラメータ:  view: 翻訳するビュー。activity: 画面名を提供するアクティビティ。callback: 翻訳完了後のコールバック。  例:  Wovn.translateView(myView, myActivity, new WovnTranslateViewFunction() { @Override public void onTranslated() { // 完了の処理 } });   ","version":"Next","tagName":"h3"},{"title":"translateView(View view, Activity activity)​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#translateviewview-view-activity-activity","content":" アクティビティを使用して画面名を決定し、コールバックなしでビューを翻訳します。  パラメータ:  view: 翻訳するビュー。activity: 画面名を提供するアクティビティ。  例:  Wovn.translateView(myView, myActivity);   ","version":"Next","tagName":"h3"},{"title":"アラートの翻訳​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#アラートの翻訳","content":" ","version":"Next","tagName":"h2"},{"title":"translateAlert(AlertDialog alertDialog)​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#translatealertalertdialog-alertdialog","content":" 指定された AlertDialog を翻訳します。WOVN SDK はほとんどの AlertDialog を自動的に翻訳しますが、非常に軽微なちらつきが発生することがあります。ちらつきを避けるために、ダイアログを表示する前にこのメソッドを使用してください。  パラメータ:  alertDialog: 翻訳するアラートダイアログ。  例:  AlertDialog dialog = new AlertDialog.Builder(context) .setTitle(&quot;Title&quot;) .setMessage(&quot;Message&quot;) .create(); Wovn.translateAlert(dialog); dialog.show();   ","version":"Next","tagName":"h3"},{"title":"汎用翻訳メソッド​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#汎用翻訳メソッド","content":" ","version":"Next","tagName":"h2"},{"title":"translate(View view, Activity activity)​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#translateview-view-activity-activity","content":" 提供されたアクティビティを使用して画面名を決定し、指定された View を翻訳します。WOVN SDK はこの View を追跡し、新しい子ビューの追加やテキストの変更などの変更が発生した際に自動的に翻訳します。  パラメータ:  view: 翻訳および追跡するビュー。activity: 画面名を提供するアクティビティ。  例:  Wovn.translate(myView, myActivity);   ","version":"Next","tagName":"h3"},{"title":"translate(View view, String screenName)​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#translateview-view-string-screenname","content":" 上記と同様ですが、指定された画面名を使用します。  パラメータ:  view: 翻訳するビュー。screenName: 画面名。  例:  Wovn.translate(myView, &quot;MainScreen&quot;);   ","version":"Next","tagName":"h3"},{"title":"言語管理​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#言語管理","content":" ","version":"Next","tagName":"h2"},{"title":"getCurrentLangCode()​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#getcurrentlangcode","content":" 現在の言語コード（例: &quot;en&quot;、&quot;ja&quot;、&quot;fr&quot;）を取得します。  戻り値: 現在の言語コード、または利用できない場合は null。  例:  String currentLang = Wovn.getCurrentLangCode();   ","version":"Next","tagName":"h3"},{"title":"changeLang(String lang)​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#changelangstring-lang","content":" 現在の言語を指定された言語コードに変更します。  パラメータ:  lang: 言語コード。  例:  Wovn.changeLang(&quot;ja&quot;);   ","version":"Next","tagName":"h3"},{"title":"changeLang(String lang, WovnLangChangeCallback callback) （廃止予定）​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#changelangstring-lang-wovnlangchangecallback-callback-廃止予定","content":" 現在の言語を変更し、操作が完了したときにコールバックを実行します。  パラメータ:  lang: 言語コード。callback: 操作完了時のコールバック。  例:  Wovn.changeLang(&quot;fr&quot;, new WovnLangChangeCallback() { @Override public void onChanged(String newLang) { // 言語変更完了の処理 } });   ","version":"Next","tagName":"h3"},{"title":"changeToSystemLang()​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#changetosystemlang","content":" 現在の言語をシステムのデフォルト言語に変更します。  例:  Wovn.changeToSystemLang();   ","version":"Next","tagName":"h3"},{"title":"changeToSystemLang(WovnLangChangeCallback callback) （廃止予定）​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#changetosystemlangwovnlangchangecallback-callback-廃止予定","content":" 上記と同様ですが、コールバックを含みます。  パラメータ:  callback: 操作完了時のコールバック。  例:  Wovn.changeToSystemLang(new WovnLangChangeCallback() { @Override public void onChanged(String systemLang) { // 言語変更完了の処理 } });   ","version":"Next","tagName":"h3"},{"title":"テキストの翻訳​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#テキストの翻訳","content":" ","version":"Next","tagName":"h2"},{"title":"translate(String src, String screenName)​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#translatestring-src-string-screenname","content":" 指定された画面名を使用して、ソーステキストを現在の言語に翻訳します。  パラメータ:  src: ソーステキスト。screenName: 画面名。  戻り値: 翻訳されたテキスト。  例:  String translated = Wovn.translate(&quot;Hello, World!&quot;, &quot;MainScreen&quot;);   ","version":"Next","tagName":"h3"},{"title":"translate(String src, String screenName, int timeoutMilliSec)​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#translatestring-src-string-screenname-int-timeoutmillisec","content":" translate(String, String) と同様ですが、WOVN の準備完了を待つためのタイムアウトを設定します。アプリ起動時に WOVN の準備が完了するのを待つ場合に有用です。  パラメータ:  src: ソーステキスト。screenName: 画面名。timeoutMilliSec: 最大待機時間（ミリ秒）。  戻り値: 翻訳されたテキスト。  例:  String translated = Wovn.translate(&quot;Hello, World!&quot;, &quot;MainScreen&quot;, 2000);   ","version":"Next","tagName":"h3"},{"title":"ステータスと設定​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#ステータスと設定","content":" ","version":"Next","tagName":"h2"},{"title":"getWovnStatus()​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#getwovnstatus","content":" WOVN SDK の現在のステータスを取得します。ステータス情報には機能、言語設定、レポート設定が含まれます。  戻り値: ステータス情報を含む WovnStatus オブジェクト。  例:  WovnStatus status = Wovn.getWovnStatus();   ","version":"Next","tagName":"h3"},{"title":"setWovnIgnore(View view, boolean ignore)​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#setwovnignoreview-view-boolean-ignore","content":" ビューが翻訳中に無視されるかどうかを設定します。  パラメータ:  view: 設定するビュー。ignore: ビューを無視する場合は true。  例:  Wovn.setWovnIgnore(myView, true);   ","version":"Next","tagName":"h3"},{"title":"getWovnIgnore(View view)​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#getwovnignoreview-view","content":" ビューが翻訳中に無視されているかどうかを確認します。  パラメータ:  view: 確認するビュー。  戻り値: 無視されている場合は true、それ以外は false。  例:  boolean isIgnored = Wovn.getWovnIgnore(myView);   ","version":"Next","tagName":"h3"},{"title":"setUserPermission(WovnPermission permission, boolean enable)​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#setuserpermissionwovnpermission-permission-boolean-enable","content":" SDK の特定の機能に対する権限を設定します。  パラメータ:  permission: 設定する WovnPermission。enable: 権限を有効にする場合は true、無効にする場合は false。  例:  Wovn.setUserPermission(WovnPermission.DATA_COLLECTION, true);   ","version":"Next","tagName":"h3"},{"title":"通知の翻訳​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#通知の翻訳","content":" ","version":"Next","tagName":"h2"},{"title":"translateNotificationData(String src)​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#translatenotificationdatastring-src","content":" 通知データ（例: プッシュ通知のテキスト）を翻訳します。  パラメータ:  src: 元の通知テキスト。  戻り値: 翻訳された通知テキスト。  例:  String translatedNotification = Wovn.translateNotificationData(notificationMessage);   ","version":"Next","tagName":"h3"},{"title":"translateFirebaseNotificationIntent(Intent firebaseNotiIntent)​","type":1,"pageTitle":"Wovn SDK for Android - 公開 API リファレンス (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/Android/wovn_apis#translatefirebasenotificationintentintent-firebasenotiintent","content":" Firebase 通知 Intent の &quot;title&quot; や &quot;body&quot; といったキーを翻訳します。  パラメータ:  firebaseNotiIntent: 通知データを含む Intent。  戻り値: 翻訳されたデータを含む Intent。  例:  Intent translatedIntent = Wovn.translateFirebaseNotificationIntent(intent);  ","version":"Next","tagName":"h3"},{"title":"ユーザープライバシーの保護 (自動翻訳)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/Japanese/iOS/protect_user_privacy","content":"","keywords":"","version":"Next"},{"title":"1. アプリ運営者への報告を制限するデバッグモード​","type":1,"pageTitle":"ユーザープライバシーの保護 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/protect_user_privacy#1-アプリ運営者への報告を制限するデバッグモード","content":" WOVN デバッグモード ドキュメントの指示に従ってデバッグモードを有効にします。アプリ運営者への報告を制限する はデフォルトで有効になっています。この動作を変更する場合は、WOVNサポートにお問い合わせください。  注意: このアプローチはそのシンプルさから非常に推奨されます。開発やテスト機能を有効にしながら、ユーザープライバシーを100％保証します。  ","version":"Next","tagName":"h2"},{"title":"2. Wovn.setWovnIgnore​","type":1,"pageTitle":"ユーザープライバシーの保護 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/protect_user_privacy#2-wovnsetwovnignore","content":" 翻訳から機密情報を除外するために、targetView.wovn.ignore = true を追加することができます。これにより、翻訳対象外とするビューを指定することができます。  注意: targetView.wovn.ignore = true は、ビューが画面に追加される前、理想的にはViewControllerの viewDidLoad メソッドの前に呼び出すことを推奨します。これにより、ビューが最初に表示されるときに翻訳されないようにします。  ","version":"Next","tagName":"h2"},{"title":"例​","type":1,"pageTitle":"ユーザープライバシーの保護 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/protect_user_privacy#例","content":" targetView.wovn.ignore = true print(targetView.wovn.ignore)  ","version":"Next","tagName":"h3"},{"title":"Translate Text 機能 (自動翻訳)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/Japanese/iOS/manual_translation_for_view_and_texts","content":"","keywords":"","version":"Next"},{"title":"View の翻訳​","type":1,"pageTitle":"Translate Text 機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/manual_translation_for_view_and_texts#view-の翻訳","content":" View を翻訳するには、Wovn.translateView(ViewToTranslate_View, ScreenName_String) メソッドを使用します。このメソッドは、指定された View のテキストを翻訳し、翻訳されたテキストで View を更新します。このメソッドを呼び出した後、WOVN SDK は ViewToTranslate_View を監視し、何かが変更された場合に自動的に翻訳を行います。  ","version":"Next","tagName":"h2"},{"title":"例​","type":1,"pageTitle":"Translate Text 機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/manual_translation_for_view_and_texts#例","content":" Wovn.changeLang(&quot;ja&quot;); notAutoTranslatedView1 = UITextView() notAutoTranslatedView1.text = &quot;This is a sample TextView in iOS.&quot; Wovn.translateView(notAutoTranslatedView1, &quot;ScreenName&quot;); print(notAutoTranslatedView1.text) // -&gt; これは、iOS のサンプル TextView です。 TextView notAutoTranslatedView2 = findViewById(R.id.not_auto_translated_text_view_2); notAutoTranslatedView2.text = &quot;This is a sample TextView in iOS too!&quot; Wovn.translateView(notAutoTranslatedView2, currentViewController); print(notAutoTranslatedView2.text) // -&gt; これも iOS のサンプル TextView です。 notAutoTranslatedView2.setText(&quot;This text will be translated by WOVN SDK automatically without calling Wovn.translateView again!&quot;); print(notAutoTranslatedView2.text) // -&gt; このテキストは、Wovn.translateView を再度呼び出さなくても、WOVN SDK によって自動的に翻訳されます。   ","version":"Next","tagName":"h3"},{"title":"テキストの翻訳​","type":1,"pageTitle":"Translate Text 機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/manual_translation_for_view_and_texts#テキストの翻訳","content":" テキストを直接翻訳するには、Wovn.translate(TextToTranslate_String, ScreenName_String) メソッドを使用します。このメソッドは、指定されたテキストを翻訳し、翻訳されたテキストを返します。  Wovn.changeLang(&quot;ja&quot;); print(Wovn.translate(&quot;This text will be translated to the current language!&quot;, &quot;ScreenName&quot;)); // -&gt; このテキストは現在の言語に翻訳されます。  ","version":"Next","tagName":"h2"},{"title":"iOS設定アプリへのWOVN Settings統合 (自動翻訳)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/Japanese/iOS/setup_wovn_settings_in_app_info","content":"","keywords":"","version":"Next"},{"title":"概要​","type":1,"pageTitle":"iOS設定アプリへのWOVN Settings統合 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/setup_wovn_settings_in_app_info#概要","content":" WOVN Settings画面は、iOS設定アプリ内に組み込まれた事前設定済みのインターフェースです。ユーザーはアプリの翻訳関連設定を管理できます。主な機能は isDebugMode トグルで、オペレーターモードを有効にします。このモードを有効にすると、レポート頻度と再翻訳の頻度が10秒ごとに増加します。  さらに、この画面ではレポートステータス、ユーザーID、その他のトラブルシューティング情報などの有用なデバッグ情報が表示されます。  ","version":"Next","tagName":"h2"},{"title":"セットアップ手順​","type":1,"pageTitle":"iOS設定アプリへのWOVN Settings統合 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/setup_wovn_settings_in_app_info#セットアップ手順","content":" WOVN Settings画面を統合するには、以下の手順に従ってください：  Settings Bundleを追加する: まだ追加していない場合は、プロジェクトに Settings Bundle を追加します。これは以下の手順で行えます： File &gt; New &gt; File &gt; Settings Bundle に移動します。 一度追加すると、バンドルはプロジェクト構造に含まれます。 Root.plistを修正する: Settings.Bundle フォルダ内で Root.plist ファイルを見つけます。Root.plist に以下のXMLコードを追加します。既にファイルが存在する場合は、&lt;!-- WOVN Settings section start --&gt; と &lt;!-- WOVN Settings section end --&gt; の間のセクションのみをコピーしてください。 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt; &lt;plist version=&quot;1.0&quot;&gt; &lt;dict&gt; &lt;key&gt;StringsTable&lt;/key&gt; &lt;string&gt;Root&lt;/string&gt; &lt;key&gt;PreferenceSpecifiers&lt;/key&gt; &lt;array&gt; &lt;!-- WOVN Settings section start --&gt; &lt;dict&gt; &lt;key&gt;Type&lt;/key&gt; &lt;string&gt;PSGroupSpecifier&lt;/string&gt; &lt;key&gt;Title&lt;/key&gt; &lt;string&gt;翻訳設定&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Type&lt;/key&gt; &lt;string&gt;PSTextFieldSpecifier&lt;/string&gt; &lt;key&gt;Title&lt;/key&gt; &lt;string&gt;バリデーショントークン&lt;/string&gt; &lt;key&gt;Key&lt;/key&gt; &lt;string&gt;verify_token&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Type&lt;/key&gt; &lt;string&gt;PSToggleSwitchSpecifier&lt;/string&gt; &lt;key&gt;Title&lt;/key&gt; &lt;string&gt;デバッグモード（アプリオペレーターとレポートを有効化）&lt;/string&gt; &lt;key&gt;Key&lt;/key&gt; &lt;string&gt;debug_mode&lt;/string&gt; &lt;key&gt;DefaultValue&lt;/key&gt; &lt;false/&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Type&lt;/key&gt; &lt;string&gt;PSTitleValueSpecifier&lt;/string&gt; &lt;key&gt;DefaultValue&lt;/key&gt; &lt;string&gt;データを更新するためにアプリを実行してください&lt;/string&gt; &lt;key&gt;Title&lt;/key&gt; &lt;string&gt;情報&lt;/string&gt; &lt;key&gt;Key&lt;/key&gt; &lt;string&gt;debug_status&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Type&lt;/key&gt; &lt;string&gt;PSTextFieldSpecifier&lt;/string&gt; &lt;key&gt;Title&lt;/key&gt; &lt;string&gt;その他の設定（&quot;key1=value1; key2=value2&quot;）&lt;/string&gt; &lt;key&gt;Key&lt;/key&gt; &lt;string&gt;bulk_settings&lt;/string&gt; &lt;/dict&gt; &lt;!-- WOVN Settings section end --&gt; &lt;/array&gt; &lt;/dict&gt; &lt;/plist&gt; このコードは、iOS設定アプリにWOVN Settingsのセクションを追加します。これにより、WOVN SDKはここで指定された設定を読み取り、適用できるようになります。  ","version":"Next","tagName":"h2"},{"title":"デモンストレーション​","type":1,"pageTitle":"iOS設定アプリへのWOVN Settings統合 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/setup_wovn_settings_in_app_info#デモンストレーション","content":" 以下は、iOS設定アプリ内に統合されたWOVN Settings画面のデモンストレーションです：    ","version":"Next","tagName":"h2"},{"title":"重要な注意点​","type":1,"pageTitle":"iOS設定アプリへのWOVN Settings統合 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/setup_wovn_settings_in_app_info#重要な注意点","content":" トークンの検証: ユーザーは バリデーショントークン フィールドに正しいトークンを入力する必要があります。トークンが有効である場合にのみ、SDKは設定を適用します。 ","version":"Next","tagName":"h2"},{"title":"Wovn SDK for iOS - 公開 API リファレンス (Swift) (自動翻訳)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/Japanese/iOS/wovn_apis","content":"","keywords":"","version":"Next"},{"title":"APIs​","type":1,"pageTitle":"Wovn SDK for iOS - 公開 API リファレンス (Swift) (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/wovn_apis#apis","content":" ","version":"Next","tagName":"h2"},{"title":"translateNotificationContent(notiContent: UNMutableNotificationContent) -> UNMutableNotificationContent​","type":1,"pageTitle":"Wovn SDK for iOS - 公開 API リファレンス (Swift) (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/wovn_apis#translatenotificationcontentnoticontent-unmutablenotificationcontent---unmutablenotificationcontent","content":" UNMutableNotificationContent の title、subtitle、および body フィールドを翻訳します。  パラメータ:  notiContent: 翻訳対象の通知コンテンツ。  戻り値: 翻訳されたフィールドを含む同じ通知コンテンツのインスタンス。  例:  let translatedContent = Wovn.translateNotificationContent(notiContent: originalContent)   ","version":"Next","tagName":"h3"},{"title":"getCurrentLangCode(waitForInstance: Bool = true) -> String?​","type":1,"pageTitle":"Wovn SDK for iOS - 公開 API リファレンス (Swift) (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/wovn_apis#getcurrentlangcodewaitforinstance-bool--true---string","content":" WOVN SDK によって選択された現在の言語コードを取得します。  パラメータ:  waitForInstance: WOVN インスタンスの準備が整うまで待機するかどうか。  戻り値: 現在の言語コード（例: &quot;en&quot;, &quot;ja&quot;）または利用できない場合は nil。  例:  if let langCode = Wovn.getCurrentLangCode() { print(&quot;現在の言語コード: \\(langCode)&quot;) }   ","version":"Next","tagName":"h3"},{"title":"changeToSystemLang(callback: ((String) -> Void)? = nil)​","type":1,"pageTitle":"Wovn SDK for iOS - 公開 API リファレンス (Swift) (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/wovn_apis#changetosystemlangcallback-string---void--nil","content":" 現在の言語をシステムのデフォルト言語に変更します。  パラメータ:  callback: 変更完了後に新しい言語コードを受け取るクロージャ。（廃止予定）  例:  Wovn.changeToSystemLang { newLang in print(&quot;言語が変更されました: \\(newLang)&quot;) }   ","version":"Next","tagName":"h3"},{"title":"changeLang(lang: String, callback: ((String) -> Void)? = nil)​","type":1,"pageTitle":"Wovn SDK for iOS - 公開 API リファレンス (Swift) (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/wovn_apis#changelanglang-string-callback-string---void--nil","content":" 現在の言語を指定された言語コードに変更します。  パラメータ:  lang: 目標の言語コード。callback: 変更完了後に新しい言語コードを受け取るクロージャ。（廃止予定）  例:  Wovn.changeLang(lang: &quot;fr&quot;)   ","version":"Next","tagName":"h3"},{"title":"translate(src: String, screenName: String) -> String​","type":1,"pageTitle":"Wovn SDK for iOS - 公開 API リファレンス (Swift) (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/wovn_apis#translatesrc-string-screenname-string---string","content":" 指定された screenName の翻訳を使用して、与えられたソーステキスト src を翻訳します。  パラメータ:  src: ソーステキスト。screenName: 翻訳に関連付けられた画面名。  戻り値: 翻訳されたテキスト、または翻訳が見つからない場合は元の src。  例:  let translatedText = Wovn.translate(src: &quot;Hello&quot;, screenName: &quot;MainScreen&quot;)   ","version":"Next","tagName":"h3"},{"title":"getWovnStatus() -> WovnStatus​","type":1,"pageTitle":"Wovn SDK for iOS - 公開 API リファレンス (Swift) (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/wovn_apis#getwovnstatus---wovnstatus","content":" WOVN SDK の現在のステータスを取得します。これにはロードステータス、データの安全性、権限、および利用可能な言語が含まれます。  戻り値: SDK の状態に関する詳細情報を含む WovnStatus オブジェクト。  例:  let status = Wovn.getWovnStatus() print(&quot;SDKのロードステータス: \\(status.loadStatus)&quot;)   ","version":"Next","tagName":"h3"},{"title":"translateView(view: UIView, screenName: String? = nil, translationType: TranslationType = .translateView, completionHandler: @escaping () -> Void = {})​","type":1,"pageTitle":"Wovn SDK for iOS - 公開 API リファレンス (Swift) (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/wovn_apis#translateviewview-uiview-screenname-string--nil-translationtype-translationtype--translateview-completionhandler-escaping----void--","content":" 指定された UIView を現在の言語に翻訳します。オプションで画面名と翻訳タイプを指定できます。  パラメータ:  view: 翻訳対象のビュー。screenName: 翻訳を取得する画面名（オプション）。translationType: 翻訳のタイプ（デフォルトは .translateView）。completionHandler: 翻訳完了後に呼び出されるクロージャ。（廃止予定）  例:  Wovn.translateView(view: myView, screenName: &quot;MainScreen&quot;)   ","version":"Next","tagName":"h3"},{"title":"translateView(view: UIView, viewController: UIViewController, translationType: TranslationType = .translateView, completionHandler: @escaping () -> Void = {})​","type":1,"pageTitle":"Wovn SDK for iOS - 公開 API リファレンス (Swift) (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/wovn_apis#translateviewview-uiview-viewcontroller-uiviewcontroller-translationtype-translationtype--translateview-completionhandler-escaping----void--","content":" 指定された UIViewController のクラス名から画面名を推測して UIView を翻訳します。  パラメータ:  view: 翻訳対象のビュー。viewController: 画面名を提供するビューコントローラ。translationType: 翻訳のタイプ（デフォルトは .translateView）。completionHandler: 翻訳後に呼び出されるクロージャ。（廃止予定）  例:  Wovn.translateView(view: myView, viewController: self)   ","version":"Next","tagName":"h3"},{"title":"translate(navigationItem: UINavigationItem, screenName: String? = nil, translationType: TranslationType = .translateView, completionHandler: @escaping () -> Void = {})​","type":1,"pageTitle":"Wovn SDK for iOS - 公開 API リファレンス (Swift) (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/wovn_apis#translatenavigationitem-uinavigationitem-screenname-string--nil-translationtype-translationtype--translateview-completionhandler-escaping----void--","content":" 現在の言語を使用して UINavigationItem のタイトルや要素を翻訳します。  パラメータ:  navigationItem: 翻訳対象のナビゲーションアイテム。screenName: 翻訳のための画面名（オプション）。translationType: 翻訳のタイプ（デフォルトは .translateView）。completionHandler: 翻訳完了後に呼び出されるクロージャ。（廃止予定）  例:  Wovn.translate(navigationItem: myNavItem, screenName: &quot;DetailView&quot;)   ","version":"Next","tagName":"h3"},{"title":"translate(navigationItem: UINavigationItem, viewController: UIViewController, translationType: TranslationType = .translateView, completionHandler: @escaping () -> Void = {})​","type":1,"pageTitle":"Wovn SDK for iOS - 公開 API リファレンス (Swift) (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/wovn_apis#translatenavigationitem-uinavigationitem-viewcontroller-uiviewcontroller-translationtype-translationtype--translateview-completionhandler-escaping----void--","content":" 前述のメソッドと似ていますが、UIViewController のクラス名から画面名を推測します。  パラメータ:  navigationItem: 翻訳対象のナビゲーションアイテム。viewController: 画面名を提供するコントローラ。translationType: 翻訳のタイプ。completionHandler: 翻訳完了後に呼び出されるクロージャ。（廃止予定）  例:  Wovn.translate(navigationItem: navigationItem, viewController: self)   ","version":"Next","tagName":"h3"},{"title":"start(appGroupIdentifier: String? = nil, isDebugMode: Bool = false, autoTranslateUIKit: Bool = true, isNotificationServiceEnv: Bool = false)​","type":1,"pageTitle":"Wovn SDK for iOS - 公開 API リファレンス (Swift) (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/wovn_apis#startappgroupidentifier-string--nil-isdebugmode-bool--false-autotranslateuikit-bool--true-isnotificationserviceenv-bool--false","content":" WOVN SDK を初期化および設定します。このメソッドは翻訳データや設定をセットアップし、オプションで UIKit メソッドをスウィズルして自動翻訳を行います。  パラメータ:  appGroupIdentifier: アプリグループの識別子（オプション）。isDebugMode: ログおよびテスト用にデバッグモードを有効にします。デバッグビルドでのみデバッグモードを有効にするために _isDebugAssertConfiguration() を使用することを推奨します。autoTranslateUIKit: UIKit メソッドをスウィズルして UI 要素を自動的に翻訳します。isNotificationServiceEnv: true の場合、通知翻訳環境向けに SDK を最適化します。  例:  Wovn.start( appGroupIdentifier: &quot;group.io.wovn.workbox&quot;, isDebugMode: _isDebugAssertConfiguration(), autoTranslateUIKit: true, isNotificationServiceEnv: false )   ","version":"Next","tagName":"h3"},{"title":"setUserPermission(permission: WovnPermission, enabled: Bool)​","type":1,"pageTitle":"Wovn SDK for iOS - 公開 API リファレンス (Swift) (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/wovn_apis#setuserpermissionpermission-wovnpermission-enabled-bool","content":" 特定の WOVN 機能（例: レポート、エラーレポート）の権限を設定します。  パラメータ:  permission: 設定する WovnPermission タイプ。enabled: 権限を有効にする場合は true、無効にする場合は false。  例:  Wovn.setUserPermission(permission: .report, enabled: true)   ","version":"Next","tagName":"h3"},{"title":"hasPermission(permission: WovnPermission) -> Bool​","type":1,"pageTitle":"Wovn SDK for iOS - 公開 API リファレンス (Swift) (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/wovn_apis#haspermissionpermission-wovnpermission---bool","content":" 特定の WOVN 権限が現在有効かどうかを確認します。  パラメータ:  permission: 確認する WovnPermission。  戻り値: 有効であれば true、それ以外は false。  例:  let hasReportPermission = Wovn.hasPermission(permission: .report)  ","version":"Next","tagName":"h3"},{"title":"WOVN プッシュ通知機能 (自動翻訳)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/Japanese/iOS/translate_push_notification","content":"","keywords":"","version":"Next"},{"title":"概要​","type":1,"pageTitle":"WOVN プッシュ通知機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/translate_push_notification#概要","content":" このドキュメントでは、以下のことを学びます：  WOVN が通知をどのように翻訳できるかエンドユーザーに表示する前にサーバーからの通知データにアクセスし、翻訳するために WOVN に許可する方法機密ユーザー情報を含む通知データを翻訳するために WOVN を使用する方法ローカルプッシュ通知を翻訳するために WOVN を使用する方法  ","version":"Next","tagName":"h2"},{"title":"詳細​","type":1,"pageTitle":"WOVN プッシュ通知機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/translate_push_notification#詳細","content":" ","version":"Next","tagName":"h2"},{"title":"1. WOVN が通知をどのように翻訳できるか​","type":1,"pageTitle":"WOVN プッシュ通知機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/translate_push_notification#1-wovn-が通知をどのように翻訳できるか","content":"   まず、テストデバイスにテストプッシュ通知を送信します。これにより、WOVN が通知データを WOVN ダッシュボードに報告し、翻訳できるようになります。WOVN ダッシュボードが通知データを翻訳した後、同じ通知を再度テストデバイスに送信して確認します。通知が翻訳されたことを確認したら、すべてのユーザーに送信できます。  ","version":"Next","tagName":"h3"},{"title":"2. エンドユーザーに表示する前にサーバーからの通知データにアクセスし、翻訳するために WOVN に許可する方法​","type":1,"pageTitle":"WOVN プッシュ通知機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/translate_push_notification#2-エンドユーザーに表示する前にサーバーからの通知データにアクセスし翻訳するために-wovn-に許可する方法","content":" サーバー側で、すべてのプッシュ通知に &quot;mutable_content&quot;: true を追加してください。これがないと、Apple は通知をさらに編集する必要がないと判断し、通知をそのまま表示します。 UNNotificationServiceExtension を拡張してカスタムロジックを追加していない場合は、Apple のドキュメント（https://developer.apple.com/documentation/usernotifications/unnotificationserviceextension）に従って追加してください。 UNNotificationServiceExtension とアプリは別々のサンドボックスで実行されるため、データを共有するためのブリッジを作成する必要があります。これには App Groups を使用します： メインアプリの App Groups に group.io.wovn.workbox を追加します。この例では wovn-ios-demoapp です。 Notification Service Extension の App Groups に group.io.wovn.workbox を追加します。 メインアプリと UNNotificationServiceExtension の両方で Wovn SDK に App Groups group.io.wovn.workbox を通知します。その後、プッシュ通知を翻訳します。 AppDelegate.swift で、Wovn.start のコードパラメータ appGroupIdentifier を &quot;group.io.wovn.workbox&quot; に、isNotificationServiceEnv を false に変更します。例：Wovn.start(appGroupIdentifier: &quot;group.io.wovn.workbox&quot;, isNotificationServiceEnv: false) func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool { // 一部のアプリケーションコード // [変更前] // Wovn.start(isDebugMode: _isDebugAssertConfiguration(), autoTranslateUIKit: true) // [変更後] Wovn.start( appGroupIdentifier: &quot;group.io.wovn.workbox&quot;, isDebugMode: _isDebugAssertConfiguration(), autoTranslateUIKit: true, isNotificationServiceEnv: false ) // 一部の WOVN コード // その他のアプリケーションコード } UNNotificationServiceExtension フォルダ内の NotificationService.swift に以下のコードを追加します。 import UserNotifications import WOVNswift class NotificationService: UNNotificationServiceExtension { var contentHandler: ((UNNotificationContent) -&gt; Void)? var bestAttemptContent: UNMutableNotificationContent? override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -&gt; Void) { Wovn.start(appGroupIdentifier: &quot;group.io.wovn.workbox&quot;, isNotificationServiceEnv: true) self.contentHandler = contentHandler bestAttemptContent = (request.content.mutableCopy() as? UNMutableNotificationContent) if let bestAttemptContent = bestAttemptContent { let translatedContent = Wovn.translateNotificationContent(notiContent: bestAttemptContent) contentHandler(translatedContent) } } override func serviceExtensionTimeWillExpire() { // システムによって拡張機能が終了される直前に呼ばれます。 // これを機会に「最善の試み」として修正されたコンテンツを配信します。そうしないと、元のプッシュペイロードが使用されます。 if let contentHandler = contentHandler, let bestAttemptContent = bestAttemptContent { contentHandler(bestAttemptContent) } } } ステップ4の後、プッシュ通知の内容は翻訳され、translatedContent に保存されます。上記のコードでは、そのまま表示していますが、エンドユーザーに表示する前にさらにカスタマイズすることも可能です。  ","version":"Next","tagName":"h3"},{"title":"テスト方法​","type":1,"pageTitle":"WOVN プッシュ通知機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/translate_push_notification#テスト方法","content":" 以下のデータを使用して、Firebase Cloud Messaging 経由でデバイスにプッシュ通知を送信できます。 { &quot;to&quot;: &quot;{YOUR TESTING DEVICE FCM TOKEN}&quot;, &quot;notification&quot;: { &quot;mutable_content&quot;: true, // この行を忘れずに &quot;title&quot;: &quot;こんにちは&quot;, &quot;body&quot;: &quot;素晴らしい日ですね！&quot; } } 初回は、テストデバイスが日本語で通知を受信するはずです。これは、WOVN がまだ翻訳を持っていないためです。WOVN にデータの報告を許可している場合、通知のタイトルと本文を WOVN ダッシュボードの PushNotification 画面内で確認できます。 2つの値を翻訳した後、Save and publish をクリックすると、次回から同じ通知を送信した際にエンドユーザーの言語に翻訳されて表示されます。  ","version":"Next","tagName":"h3"},{"title":"3. 機密ユーザー情報を含む通知データを翻訳するために WOVN を使用する方法​","type":1,"pageTitle":"WOVN プッシュ通知機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/translate_push_notification#3-機密ユーザー情報を含む通知データを翻訳するために-wovn-を使用する方法","content":" 通知の title や body にユーザーデータを直接追加する代わりに、%{variable_name}% を使用し、通知データの data 内にデータを含めることができます。 { &quot;to&quot;: &quot;{YOUR TESTING DEVICE FCM TOKEN}&quot;, &quot;notification&quot;: { &quot;mutable_content&quot;: true, // この行を忘れずに &quot;title&quot;: &quot;今月の請求書の準備ができました, %name%さん!&quot;, &quot;body&quot;: &quot;今月は%amount%円です。 %date%までにお支払いください&quot; }, &quot;data&quot;: { &quot;name&quot;: &quot;John Doe&quot;, &quot;amount&quot;: &quot;10000&quot;, &quot;date&quot;: &quot;2023/12/12&quot; } } 通常のプッシュ通知をテストする際と同じプロセスに従ってください。ユーザー機密データを含む通知も情報漏洩なく翻訳されます。  ","version":"Next","tagName":"h2"},{"title":"4. ローカルプッシュ通知を翻訳するために WOVN を使用する方法​","type":1,"pageTitle":"WOVN プッシュ通知機能 (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/iOS/translate_push_notification#4-ローカルプッシュ通知を翻訳するために-wovn-を使用する方法","content":" Wovn.translateNotificationData を使用して、ローカルプッシュ通知のデータを表示前に翻訳できます。  var content = UNMutableNotificationContent() content.title = &quot;こんにちは%name%さん&quot; content.subtitle = &quot;お金を払ってください.%amount%ドルです&quot; content.body = &quot;期限内にお支払いをお願いいたします。%amount%ドルです&quot; content.userInfo.updateValue(&quot;John Doe&quot;, forKey: &quot;name&quot;) content.userInfo.updateValue(&quot;150&quot;, forKey: &quot;amount&quot;) content.userInfo.updateValue(&quot;2099/12/12&quot;, forKey: &quot;date&quot;) content.sound = UNNotificationSound.default content = Wovn.translateNotificationContent(notiContent: content) // ローカルプッシュ通知を表示するコード  ","version":"Next","tagName":"h2"},{"title":"wovn_sdk CLI ドキュメント (自動翻訳)","type":0,"sectionRef":"#","url":"/WovnAppDocumentation/docs/Japanese/WOVN CLI/overview","content":"","keywords":"","version":"Next"},{"title":"概要​","type":1,"pageTitle":"wovn_sdk CLI ドキュメント (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/WOVN CLI/overview#概要","content":" wovn_sdk CLI は、iOS・Android・Flutter・Xamarin プロジェクトに対して、WOVN SDK のセットアップや管理を簡単にするためのツールです。SDK の認証情報を設定したり、既存あるいは新規プロジェクトに WOVN を組み込んだり、翻訳用の文字列リソースを抽出するためのコマンドを提供します。  ","version":"Next","tagName":"h2"},{"title":"インストールとセットアップ​","type":1,"pageTitle":"wovn_sdk CLI ドキュメント (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/WOVN CLI/overview#インストールとセットアップ","content":" 前提条件: マシンに Ruby と Bundler がインストールされていることを確認してください。 インストール: 以下のコマンドを実行して、最新の wovn_sdk CLI をダウンロード・インストールできます。 gem uninstall wovn_sdk --all --executables --ignore-dependencies curl -fSL -o wovn_sdk.gem &quot;https://download.wovn.app/cli/latest/wovn_sdk.gem&quot; gem install ./wovn_sdk.gem rm wovn_sdk.gem wovn_sdk help 補足: gem uninstall wovn_sdk --all --executables --ignore-dependencies は、以前インストールされているバージョンをアンインストールするためのコマンドです。curl -fSL -o wovn_sdk.gem &quot;https://download.wovn.app/cli/latest/wovn_sdk.gem&quot; は CLI の最新バージョンをダウンロードします。必要に応じて latest を特定バージョン（例: 0.2.0、latest_release_candidate など）に置き換えてください。 設定: CLI を使用する前に、WOVN のプロジェクトトークンと API キーを使って設定を行う必要があります。以下のコマンドを実行し、認証情報を登録してください。 wovn_sdk config --token={wovn_project_token} --api_key={wovn_api_key}   ","version":"Next","tagName":"h2"},{"title":"コマンド一覧​","type":1,"pageTitle":"wovn_sdk CLI ドキュメント (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/WOVN CLI/overview#コマンド一覧","content":" ","version":"Next","tagName":"h2"},{"title":"1. config​","type":1,"pageTitle":"wovn_sdk CLI ドキュメント (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/WOVN CLI/overview#1-config","content":" 説明: WOVN のプロジェクトトークンと API キーを使用して WOVN SDK を設定します。認証が必要な手順を実行する前に行ってください。  使用方法:  wovn_sdk config --token=YOUR_PROJECT_TOKEN [--api_key=YOUR_API_KEY] [--profile=PROFILE_NAME]   必須オプション:  --token=YOUR_PROJECT_TOKEN: WOVN のプロジェクトトークン（必須）。  任意オプション:  --api_key=YOUR_API_KEY: WOVN の API キー。一部の操作で推奨されますが、必須ではありません。--profile=PROFILE_NAME: 設定を切り替えるためのプロファイル名（デフォルトは default）。  このコマンドが行うこと:  WOVN との認証を行い、その後の SDK セットアップやリソース管理コマンドを使用できるようにします。  例:  wovn_sdk config --token=T0K3NW --api_key=api_key_from_dashboard     ","version":"Next","tagName":"h3"},{"title":"2. setup​","type":1,"pageTitle":"wovn_sdk CLI ドキュメント (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/WOVN CLI/overview#2-setup","content":" 説明: 既存のプロジェクトに WOVN SDK を組み込みます。必要に応じて、プロジェクトのキックスタートや文字列リソースの処理を同時に実行できます。  使用方法:  wovn_sdk setup --platform=PLATFORM [--profile=PROFILE_NAME] [--project_path=PROJECT_PATH] [--sdk_version=VERSION] [--project_targets=TARGETS]   必須オプション:  --platform=PLATFORM: プラットフォームを指定（iOS、Android、Flutter、Xamarin）。--project_path=PROJECT_PATH: プロジェクトファイルへのパス（iOS の場合は .xcodeproj ファイル）。  任意オプション:  --profile=PROFILE_NAME: 使用する設定プロファイル（デフォルトは default）。--sdk_version=VERSION: 使用する WOVN SDK のバージョン（デフォルトは latest）。--project_targets=TARGETS: (iOS のみ) カンマ区切りでターゲットを指定（例: --project_targets=MyApp,MyAppTests）。--with_kickstart: SDK セットアップ後にキックスタート機能も実行。--with_string_resources: セットアップ後に文字列リソースの抽出とアップロードを実行。--auto_yes, -y: すべてのプロンプトに自動的に「yes」と回答（--with_string_resources と併用する場合に便利）。--dry_run: 文字列リソースの抽出をアップロードなしで実行（--with_string_resources と併用）。  このコマンドが行うこと:  必要なファイルや依存関係、設定を追加し、既存のプロジェクトに WOVN SDK を組み込みます。--with_kickstart オプションを付けた場合、キックスタートも自動的に実行します。--with_string_resources オプションを付けた場合、文字列リソースの抽出やアップロードが行われます。  例:  # iOS プロジェクトにデフォルトバージョンでインストール（kickstart なし、リソース抽出なし） wovn_sdk setup --platform=iOS --project_path=./MyApp.xcodeproj # Android プロジェクトに特定バージョンの SDK をインストールし、kickstart を実行 wovn_sdk setup --platform=Android --project_path=./MyAndroidApp --sdk_version=v3.6.0_rc1 --with_kickstart # iOS プロジェクトにインストールし、文字列リソース抽出を dry_run で自動実行 wovn_sdk setup --platform=iOS --project_path=./MyApp.xcodeproj --with_string_resources --dry_run     ","version":"Next","tagName":"h3"},{"title":"3. kickstart​","type":1,"pageTitle":"wovn_sdk CLI ドキュメント (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/WOVN CLI/overview#3-kickstart","content":" 説明: WOVN SDK を利用したプロジェクトを素早く作成・更新するためのコマンドです。新規プロジェクトや必要なファイルを一気に追加したい場合に便利です。  使用方法:  wovn_sdk kickstart --platform=PLATFORM [--project_path=PATH] [--profile=PROFILE_NAME]   必須オプション:  --platform=PLATFORM: iOS または Android。--project_path=PATH: 既存のプロジェクトがある場合、そのパスを指定。  任意オプション:  --profile=PROFILE_NAME: 使用する設定プロファイル（デフォルトは default）。  このコマンドが行うこと:  プロジェクトファイルを作成または更新し、WOVN SDK を組み込んで、多言語対応の開発をすぐに始められるようにします。  例:  # iOS プロジェクトをキックスタート wovn_sdk kickstart --platform=iOS --project_path=./MyApp.xcodeproj # Android プロジェクトをキックスタート（パス指定あり） wovn_sdk kickstart --platform=Android --project_path=/path/to/MyAndroidApp     ","version":"Next","tagName":"h3"},{"title":"4. string_resources​","type":1,"pageTitle":"wovn_sdk CLI ドキュメント (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/WOVN CLI/overview#4-string_resources","content":" 説明: 翻訳のために、文字列リソースを抽出して、必要に応じて WOVN へアップロードします。setup コマンドと --with_string_resources を組み合わせて実行することもできます。  使用方法:  wovn_sdk string_resources --platform=PLATFORM --project_path=PATH [--profile=PROFILE_NAME] [--auto_yes] [--dry_run]   必須オプション:  --platform=PLATFORM: iOS または Android。--project_path=PATH: プロジェクトへのパス。  任意オプション:  --profile=PROFILE_NAME: 使用する設定プロファイル（デフォルトは default）。--auto_yes, -y: プロンプトに自動的に「yes」と回答。--dry_run: 抽出結果の表示のみでアップロードしない。  このコマンドが行うこと:  プロジェクトのリソースファイルをスキャンし、文字列を検出。検出した文字列を翻訳用に抽出。--dry_run を使用しない場合は、WOVN にアップロードして翻訳管理を行えるようにします。  例:  # Android プロジェクトの文字列を抽出し、アップロードは行わない wovn_sdk string_resources --platform=Android --project_path=./MyAndroidApp --dry_run # iOS プロジェクトの文字列を抽出し、すべてのプロンプトに自動的に「yes」と回答 wovn_sdk string_resources --platform=iOS --project_path=./MyApp.xcodeproj --auto_yes     ","version":"Next","tagName":"h3"},{"title":"5. version​","type":1,"pageTitle":"wovn_sdk CLI ドキュメント (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/WOVN CLI/overview#5-version","content":" 説明: 現在の WOVN SDK CLI のバージョンを表示します。  使用方法:  wovn_sdk version   例:  wovn_sdk version # 出力例: WOVN SDK CLI version X.Y.Z     ","version":"Next","tagName":"h3"},{"title":"6. help​","type":1,"pageTitle":"wovn_sdk CLI ドキュメント (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/WOVN CLI/overview#6-help","content":" 説明: すべてのコマンド、または特定のコマンドに関するヘルプ情報を表示します。  使用方法:  wovn_sdk help [COMMAND]   例:  wovn_sdk help wovn_sdk help setup     ","version":"Next","tagName":"h3"},{"title":"クイックセットアップ例​","type":1,"pageTitle":"wovn_sdk CLI ドキュメント (自動翻訳)","url":"/WovnAppDocumentation/docs/Japanese/WOVN CLI/overview#クイックセットアップ例","content":" wovn_sdk をインストールし、スクリプトを使って iOS・Android プロジェクトに WOVN SDK をセットアップ Android（詳細は Android クイックスタートガイド を参照） export WOVN_PROJECT_TOKEN=wovn_project_token export WOVN_API_KEY=wovn_api_key export ANDROID_PROJECT_PATH=absolute_path_to_android_project export WOVN_CLI_VERSION=latest # または特定のバージョン bash &lt;(curl -fsSL https://raw.githubusercontent.com/WOVNio/WovnAppDocumentation/main/docs/English/Android/scripts/android_install_script.sh) 例: export WOVN_PROJECT_TOKEN=WTOKEN export WOVN_API_KEY=eyJhbGciOiJIUzI1NiJ9.eyJwcm9qZWN0X3Rva2VuIjoiUjlFAKEvIiwidG9rZW5fdXVpZCI6IFAKETY3NTA1LWNjOWEtNDJiMS05N2YzLFAKEDA5YWIyYzJlZiJ9.BmeOFN78Qj-FAKETS16BVOFAKEwbqZgHZvYVxDjYriE export ANDROID_PROJECT_PATH=/Users/user/Documents/Projects/WovnAppRepos/Android/examples/wovn-android-demoapp export WOVN_CLI_VERSION=latest bash &lt;(curl -fsSL https://raw.githubusercontent.com/WOVNio/WovnAppDocumentation/main/docs/English/Android/scripts/android_install_script.sh) iOS（詳細は iOS クイックスタートガイド を参照） export WOVN_PROJECT_TOKEN=wovn_project_token export WOVN_API_KEY=wovn_api_key export IOS_PROJECT_PATH=absolute_path_to_ios_project export IOS_PROJECT_TARGETS=ios_project_target1,ios_project_target2 # 任意。デフォルトはプロジェクト名と同じ export WOVN_CLI_VERSION=latest # または特定のバージョン bash &lt;(curl -fsSL https://raw.githubusercontent.com/WOVNio/WovnAppDocumentation/main/docs/English/iOS/scripts/ios_install_script.sh) 例: export WOVN_PROJECT_TOKEN=WTOKEN export WOVN_API_KEY=eyJhbGciOiJIUzI1NiJ9.eyJwcm9qZWN0X3Rva2VuIjoiUjlFAKEvIiwidG9rZW5fdXVpZCI6IFAKETY3NTA1LWNjOWEtNDJiMS05N2YzLFAKEDA5YWIyYzJlZiJ9.BmeOFN78Qj-FAKETS16BVOFAKEwbqZgHZvYVxDjYriE export IOS_PROJECT_PATH=/Users/user/Documents/Projects/WovnAppRepos/iOS/examples/wovn-ios-demoapp/wovn-ios-demoapp.xcodeproj export IOS_PROJECT_TARGETS=wovn-ios-demoapp,wovn-ios-demoappTests export WOVN_CLI_VERSION=latest bash &lt;(curl -fsSL https://raw.githubusercontent.com/WOVNio/WovnAppDocumentation/main/docs/English/iOS/scripts/ios_install_script.sh) export WOVN_PROJECT_TOKEN=WTOKEN export WOVN_API_KEY=eyJhbGciOiJIUzI1NiJ9.eyJwcm9qZWN0X3Rva2VuIjoiUjlFAKEvIiwidG9rZW5fdXVpZCI6IFAKETY3NTA1LWNjOWEtNDJiMS05N2YzLFAKEDA5YWIyYzJlZiJ9.BmeOFN78Qj-FAKETS16BVOFAKEwbqZgHZvYVxDjYriE export IOS_PROJECT_PATH=/Users/user/Documents/Projects/WovnAppRepos/iOS/examples/wovn-ios-demoapp/wovn-ios-demoapp.xcodeproj export WOVN_CLI_VERSION=latest bash &lt;(curl -fsSL https://raw.githubusercontent.com/WOVNio/WovnAppDocumentation/main/docs/English/iOS/scripts/ios_install_script.sh)  ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}