"use strict";(self.webpackChunkwovn_app_documentation=self.webpackChunkwovn_app_documentation||[]).push([[5537],{1176:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"English/ReactNative/screen_component","title":"Screen Component Documentation for React Native","description":"The Screen component is a utility designed to provide the current screen name to WOVN-related functions via React\'s Context API. This allows developers to dynamically manage and retrieve the screen name within their applications, enhancing WOVN\'s translation and reporting functionalities.","source":"@site/docs/English/ReactNative/screen_component.md","sourceDirName":"English/ReactNative","slug":"/English/ReactNative/screen_component","permalink":"/WovnAppDocumentation/docs/English/ReactNative/screen_component","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"englishDocsSidebar","previous":{"title":"Protect User Privacy","permalink":"/WovnAppDocumentation/docs/English/ReactNative/protect_user_privacy"},"next":{"title":"Translating Unsupported Components with WOVN SDK","permalink":"/WovnAppDocumentation/docs/English/ReactNative/translate_unsupported_components"}}');var r=t(4848),c=t(8453);const o={},i="Screen Component Documentation for React Native",a={},l=[{value:"Usage",id:"usage",level:2},{value:"Props",id:"props",level:2},{value:"Notes",id:"notes",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"screen-component-documentation-for-react-native",children:[(0,r.jsx)(n.code,{children:"Screen"})," Component Documentation for React Native"]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Screen"})," component is a utility designed to provide the current screen name to WOVN-related functions via React's ",(0,r.jsx)(n.code,{children:"Context"})," API. This allows developers to dynamically manage and retrieve the screen name within their applications, enhancing WOVN's translation and reporting functionalities."]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Screen"})," component wraps your application or specific screens, automatically providing the screen name to WOVN components and hooks."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Text, Screen, TextInput } from '@wovnio/react-native';\nimport * as Wovn from '@wovnio/react-native';\nimport {\n  Text as RNText,\n  Button as RNButton,\n} from 'react-native';\n\n<Screen name=\"ScreenName\">\n    {/** WOVN's components will automatically pick up the screen name from the Screen component */}\n    <Text>\u3053\u3093\u306b\u3061\u306f\u3001\u4e16\u754c</Text>\n    <Button title=\"\u3053\u3093\u306b\u3061\u306f\u3001\u4e16\u754c\uff01\"/>\n    \n    {/** Wovn.useTranslate will also automatically pick up the screen name from the Screen component */}\n    <RNText>\n        {Wovn.useTranslate('\u3053\u3093\u306b\u3061\u306f\u3001\u4e16\u754c')}\n    </RNText>\n    <RNButton title={Wovn.useTranslate('\u3053\u3093\u306b\u3061\u306f\u3001\u4e16\u754c!') as string}/>\n</Screen>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Prop Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default Value"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"name"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"_Default"})}),(0,r.jsx)(n.td,{children:"Specifies the name of the screen for translation and reporting purposes."})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Default Screen Name"}),": If the screen name cannot be retrieved from the ",(0,r.jsx)(n.code,{children:"Screen"})," component, the default screen name ",(0,r.jsx)(n.code,{children:"_Default"})," will be used."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Function Limitations"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Wovn.translateText"})," and ",(0,r.jsx)(n.code,{children:"Wovn.translate"})," do not use the ",(0,r.jsx)(n.code,{children:"Screen"})," component context to determine the screen name."]}),"\n",(0,r.jsxs)(n.li,{children:["If no ",(0,r.jsx)(n.code,{children:"screenName"})," is explicitly specified when using these functions, the reported screen name will always default to ",(0,r.jsx)(n.code,{children:"_Default"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Wrap Each Screen with the ",(0,r.jsx)(n.code,{children:"Screen"})," Component"]}),": Ensure every screen in your app is wrapped with a ",(0,r.jsx)(n.code,{children:"Screen"})," component to provide an accurate ",(0,r.jsx)(n.code,{children:"screenName"})," for WOVN's translation and reporting features."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'<Screen name="Home">\n    <Text>Welcome to the Home Screen</Text>\n</Screen>\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Explicitly Specify the ",(0,r.jsx)(n.code,{children:"screenName"})," When Using ",(0,r.jsx)(n.code,{children:"translateText"})," or ",(0,r.jsx)(n.code,{children:"translate"})]}),": Avoid relying on the default ",(0,r.jsx)(n.code,{children:"_Default"})," screen by providing a ",(0,r.jsx)(n.code,{children:"screenName"})," in these functions."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Wovn.translateText('Hello World', 'Home');\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Consistent Screen Naming"}),": Use meaningful and consistent names for your screens to ensure clarity in translations and reporting."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(6540);const r={},c=s.createContext(r);function o(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);