"use strict";(self.webpackChunkwovn_app_documentation=self.webpackChunkwovn_app_documentation||[]).push([[8498],{6323:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"English/iOS/debug_mode","title":"WOVN Debug Mode Feature","description":"The Debug Mode feature in WOVN streamlines app development and testing by enabling App Operator Mode. This mode provides faster reporting/translation updates while ensuring user privacy when combined with the Limit reporting to only app operator setting.","source":"@site/docs/English/iOS/debug_mode.md","sourceDirName":"English/iOS","slug":"/English/iOS/debug_mode","permalink":"/WovnAppDocumentation/docs/English/iOS/debug_mode","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"englishDocsSidebar","previous":{"title":"wovn_sdk CLI Documentation","permalink":"/WovnAppDocumentation/docs/English/WOVN CLI/overview"},"next":{"title":"How to install and configure WOVN iOS SDK","permalink":"/WovnAppDocumentation/docs/English/iOS/ios_quick_start"}}');var s=i(4848),o=i(8453);const r={},a="WOVN Debug Mode Feature",d={},c=[{value:"Key Benefits",id:"key-benefits",level:2},{value:"Feature Overview",id:"feature-overview",level:2},{value:"Activation Methods",id:"activation-methods",level:2},{value:"Method 1: Programmatic Activation",id:"method-1-programmatic-activation",level:3},{value:"Method 2: WOVN Settings Screen",id:"method-2-wovn-settings-screen",level:3},{value:"Verification (From v3.5.0)",id:"verification-from-v350",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"wovn-debug-mode-feature",children:"WOVN Debug Mode Feature"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"Debug Mode"})," feature in WOVN streamlines app development and testing by enabling ",(0,s.jsx)(n.strong,{children:"App Operator Mode"}),". This mode provides faster reporting/translation updates while ensuring user privacy when combined with the ",(0,s.jsx)(n.strong,{children:"Limit reporting to only app operator"})," setting."]}),"\n",(0,s.jsx)(n.h2,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Accelerated Feedback Cycle"}),": Enables rapid reporting and re-translation during development (updates every ~10 seconds)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Privacy Protection"}),": Prevents end-user data transmission to WOVN when used with privacy restrictions."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"feature-overview",children:"Feature Overview"}),"\n",(0,s.jsxs)(n.p,{children:["Enabling Debug Mode activates ",(0,s.jsx)(n.strong,{children:"App Operator Mode"})," with:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Frequent Updates"}),(0,s.jsx)(n.br,{}),"\n","Content re-translation and data reporting every 10 seconds for real-time feedback."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Privacy Safeguards"}),(0,s.jsx)(n.br,{}),"\n","Restricts data reporting exclusively to app operators in debug environments."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"activation-methods",children:"Activation Methods"}),"\n",(0,s.jsx)(n.h3,{id:"method-1-programmatic-activation",children:"Method 1: Programmatic Activation"}),"\n",(0,s.jsxs)(n.p,{children:["Enable Debug Mode through code using the ",(0,s.jsx)(n.code,{children:"start"})," method. Pass ",(0,s.jsx)(n.code,{children:"true"})," to ",(0,s.jsx)(n.code,{children:"isDebugMode"})," to enable ",(0,s.jsx)(n.code,{children:"Debug Mode"}),". Common approaches include:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Option A: Using Build Configuration Check ",(0,s.jsx)(n.code,{children:"_isDebugAssertConfiguration()"})]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"Wovn.start(isDebugMode: _isDebugAssertConfiguration())\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example Implementation (Swift):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"class AppDelegate: UIResponder, UIApplicationDelegate {\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        // ...\n        // Using internal configuration check\n        Wovn.start(isDebugMode: _isDebugAssertConfiguration())\n        // ...\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Option B: Using Standard ",(0,s.jsx)(n.code,{children:"#if DEBUG"})," Directive"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"class AppDelegate: UIResponder, UIApplicationDelegate {\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        // ...\n        #if DEBUG\n            Wovn.start(isDebugMode: true)  // Debug builds\n        #else\n            Wovn.start(isDebugMode: false) // Production builds\n        #endif\n        // ...\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Build Configuration Notes"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"_isDebugAssertConfiguration()"})," internally checks Xcode's ",(0,s.jsx)(n.code,{children:"DEBUG"})," flag configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"#if DEBUG"})," is the standard Swift preprocessor directive for:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"true"})," in debug builds (development/testing)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"false"})," in production releases"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Both methods automatically separate environments without manual configuration.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsxs)(n.em,{children:["Ensure ",(0,s.jsx)(n.code,{children:"DEBUG"})," flag is set in your target's build settings for debug schemes."]})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"method-2-wovn-settings-screen",children:"Method 2: WOVN Settings Screen"}),"\n",(0,s.jsx)(n.p,{children:"Enable through the app interface after initial setup:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Navigate to ",(0,s.jsx)(n.strong,{children:"Settings \u2192 your application"})]}),"\n",(0,s.jsxs)(n.li,{children:["Enter your WOVN token in ",(0,s.jsx)(n.strong,{children:"Validation Token"})]}),"\n",(0,s.jsxs)(n.li,{children:["Toggle ",(0,s.jsx)(n.strong,{children:"Debug Mode"})," switch ON"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["For setup details, see ",(0,s.jsx)(n.a,{href:"/WovnAppDocumentation/docs/English/iOS/setup_wovn_settings_in_app_info",children:"WOVN Settings Integration Guide"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Debug mode in translation settings screen",src:i(1101).A+"",width:"423",height:"735"})}),"\n",(0,s.jsx)(n.h2,{id:"verification-from-v350",children:"Verification (From v3.5.0)"}),"\n",(0,s.jsx)(n.p,{children:"Check activation status programmatically:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"let debugStatus = Wovn.getDebugStatus()\n// Returns human-readable status including Debug Mode state\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1101:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/debug_mode_in_wovn_settings_screen-cf6e1ed85e508539e5fc978da129c0e6.png"},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(6540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);