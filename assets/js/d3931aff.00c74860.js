"use strict";(self.webpackChunkwovn_app_documentation=self.webpackChunkwovn_app_documentation||[]).push([[286],{5037:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"English/iOS/wovn_apis","title":"Wovn SDK for iOS - Public API Reference (Swift)","description":"Table of Contents","source":"@site/docs/English/iOS/wovn_apis.md","sourceDirName":"English/iOS","slug":"/English/iOS/wovn_apis","permalink":"/WovnAppDocumentation/docs/English/iOS/wovn_apis","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"englishDocsSidebar","previous":{"title":"Wovn Push Notification Feature (v3.4.1 and lower)","permalink":"/WovnAppDocumentation/docs/English/iOS/translate_push_notification_sdk_v3_4_1"}}');var s=i(4848),r=i(8453);const a={},l="Wovn SDK for iOS - Public API Reference (Swift)",o={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"APIs",id:"apis",level:2},{value:"<code>translateNotificationContent(notiContent: UNMutableNotificationContent) -&gt; UNMutableNotificationContent</code>",id:"translatenotificationcontentnoticontent-unmutablenotificationcontent---unmutablenotificationcontent",level:3},{value:"<code>getCurrentLangCode(waitForInstance: Bool = true) -&gt; String?</code>",id:"getcurrentlangcodewaitforinstance-bool--true---string",level:3},{value:"<code>changeToSystemLang(callback: ((String) -&gt; Void)? = nil)</code>",id:"changetosystemlangcallback-string---void--nil",level:3},{value:"<code>changeLang(lang: String, callback: ((String) -&gt; Void)? = nil)</code>",id:"changelanglang-string-callback-string---void--nil",level:3},{value:"<code>translate(src: String, screenName: String) -&gt; String</code>",id:"translatesrc-string-screenname-string---string",level:3},{value:"<code>getWovnStatus() -&gt; WovnStatus</code>",id:"getwovnstatus---wovnstatus",level:3},{value:"<code>translateView(view: UIView, screenName: String? = nil, translationType: TranslationType = .translateView, completionHandler: @escaping () -&gt; Void = {})</code>",id:"translateviewview-uiview-screenname-string--nil-translationtype-translationtype--translateview-completionhandler-escaping----void--",level:3},{value:"<code>translateView(view: UIView, viewController: UIViewController, translationType: TranslationType = .translateView, completionHandler: @escaping () -&gt; Void = {})</code>",id:"translateviewview-uiview-viewcontroller-uiviewcontroller-translationtype-translationtype--translateview-completionhandler-escaping----void--",level:3},{value:"<code>translate(navigationItem: UINavigationItem, screenName: String? = nil, translationType: TranslationType = .translateView, completionHandler: @escaping () -&gt; Void = {})</code>",id:"translatenavigationitem-uinavigationitem-screenname-string--nil-translationtype-translationtype--translateview-completionhandler-escaping----void--",level:3},{value:"<code>translate(navigationItem: UINavigationItem, viewController: UIViewController, translationType: TranslationType = .translateView, completionHandler: @escaping () -&gt; Void = {})</code>",id:"translatenavigationitem-uinavigationitem-viewcontroller-uiviewcontroller-translationtype-translationtype--translateview-completionhandler-escaping----void--",level:3},{value:"<code>start(appGroupIdentifier: String? = nil, isDebugMode: Bool = false, autoTranslateUIKit: Bool = true, isNotificationServiceEnv: Bool = false)</code>",id:"startappgroupidentifier-string--nil-isdebugmode-bool--false-autotranslateuikit-bool--true-isnotificationserviceenv-bool--false",level:3},{value:"<code>setUserPermission(permission: WovnPermission, enabled: Bool)</code>",id:"setuserpermissionpermission-wovnpermission-enabled-bool",level:3},{value:"<code>hasPermission(permission: WovnPermission) -&gt; Bool</code>",id:"haspermissionpermission-wovnpermission---bool",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"wovn-sdk-for-ios---public-api-reference-swift",children:"Wovn SDK for iOS - Public API Reference (Swift)"})}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#translatenotificationcontentnoticontent-unmutablenotificationcontent---unmutablenotificationcontent",children:"translateNotificationContent"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#getcurrentlangcodewaitforinstance-bool--true---string",children:"getCurrentLangCode"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#changetosystemlangcallback-string---void--nil",children:"changeToSystemLang"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#changelanglang-string-callback-string---void--nil",children:"changeLang"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#translatesrc-string-screenname-string---string",children:"translate (Text)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#getwovnstatus---wovnstatus",children:"getWovnStatus"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#translateviewview-uiview-screenname-string--nil-translationtype-translationtype--translateview-completionhandler-escaping----void--",children:"translateView (UIView)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#translateviewview-uiview-viewcontroller-uiviewcontroller-translationtype-translationtype--translateview-completionhandler-escaping----void--",children:"translateView (UIView and UIViewController)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#translatenavigationitem-uinavigationitem-screenname-string--nil-translationtype-translationtype--translateview-completionhandler-escaping----void--",children:"translate (UINavigationItem)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#translatenavigationitem-uinavigationitem-viewcontroller-uiviewcontroller-translationtype-translationtype--translateview-completionhandler-escaping----void--",children:"translate (UINavigationItem and UIViewController)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#startappgroupidentifier-string--nil-isdebugmode-bool--false-autotranslateuikit-bool--true-isnotificationserviceenv-bool--false",children:"start"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#setuserpermissionpermission-wovnpermission-enabled-bool",children:"setUserPermission"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#haspermissionpermission-wovnpermission---bool",children:"hasPermission"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"apis",children:"APIs"}),"\n",(0,s.jsx)(n.h3,{id:"translatenotificationcontentnoticontent-unmutablenotificationcontent---unmutablenotificationcontent",children:(0,s.jsx)(n.code,{children:"translateNotificationContent(notiContent: UNMutableNotificationContent) -> UNMutableNotificationContent"})}),"\n",(0,s.jsxs)(n.p,{children:["Translates the ",(0,s.jsx)(n.code,{children:"title"}),", ",(0,s.jsx)(n.code,{children:"subtitle"}),", and ",(0,s.jsx)(n.code,{children:"body"})," fields of a ",(0,s.jsx)(n.code,{children:"UNMutableNotificationContent"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"notiContent"}),": The notification content to translate."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The same notification content instance with translated fields."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"let translatedContent = Wovn.translateNotificationContent(notiContent: originalContent)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"getcurrentlangcodewaitforinstance-bool--true---string",children:(0,s.jsx)(n.code,{children:"getCurrentLangCode(waitForInstance: Bool = true) -> String?"})}),"\n",(0,s.jsx)(n.p,{children:"Gets the current language code selected by the WOVN SDK."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"waitForInstance"}),": Whether to wait for the WOVN instance to be ready."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"}),' The current language code (e.g. "en", "ja") or ',(0,s.jsx)(n.code,{children:"nil"})," if not available."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:'if let langCode = Wovn.getCurrentLangCode() {\n    print("Current language code: \\(langCode)")\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"changetosystemlangcallback-string---void--nil",children:(0,s.jsx)(n.code,{children:"changeToSystemLang(callback: ((String) -> Void)? = nil)"})}),"\n",(0,s.jsx)(n.p,{children:"Changes the current language to match the system\u2019s default language."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"callback"}),": A closure that receives the new language code after the change completes. (to be deprecated)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:'Wovn.changeToSystemLang { newLang in\n    print("Language changed to: \\(newLang)")\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"changelanglang-string-callback-string---void--nil",children:(0,s.jsx)(n.code,{children:"changeLang(lang: String, callback: ((String) -> Void)? = nil)"})}),"\n",(0,s.jsx)(n.p,{children:"Changes the current language to the specified language code."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"lang"}),": The target language code."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"callback"}),": A closure that receives the new language code after the change completes. (to be deprecated)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:'Wovn.changeLang(lang: "fr")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"translatesrc-string-screenname-string---string",children:(0,s.jsx)(n.code,{children:"translate(src: String, screenName: String) -> String"})}),"\n",(0,s.jsxs)(n.p,{children:["Translates a given source text ",(0,s.jsx)(n.code,{children:"src"})," using the translations for the specified ",(0,s.jsx)(n.code,{children:"screenName"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src"}),": The source text."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"screenName"}),": The screen name associated with the translations."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The translated text, or the original ",(0,s.jsx)(n.code,{children:"src"})," if no translation is found."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:'let translatedText = Wovn.translate(src: "Hello", screenName: "MainScreen")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"getwovnstatus---wovnstatus",children:(0,s.jsx)(n.code,{children:"getWovnStatus() -> WovnStatus"})}),"\n",(0,s.jsx)(n.p,{children:"Retrieves the current status of the WOVN SDK, including load status, data safety, permissions, and available languages."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," A ",(0,s.jsx)(n.code,{children:"WovnStatus"})," object containing detailed information about the SDK state."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:'let status = Wovn.getWovnStatus()\nprint("SDK load status: \\(status.loadStatus)")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"translateviewview-uiview-screenname-string--nil-translationtype-translationtype--translateview-completionhandler-escaping----void--",children:(0,s.jsx)(n.code,{children:"translateView(view: UIView, screenName: String? = nil, translationType: TranslationType = .translateView, completionHandler: @escaping () -> Void = {})"})}),"\n",(0,s.jsxs)(n.p,{children:["Translates the given ",(0,s.jsx)(n.code,{children:"UIView"})," to the current language. Optionally, specify a screen name and a translation type."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"view"}),": The view to translate."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"screenName"}),": The screen name to retrieve translations from (optional)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"translationType"}),": The type of translation (default is ",(0,s.jsx)(n.code,{children:".translateView"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"completionHandler"}),": Called after the translation completes. (to be deprecated)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:'Wovn.translateView(view: myView, screenName: "MainScreen")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"translateviewview-uiview-viewcontroller-uiviewcontroller-translationtype-translationtype--translateview-completionhandler-escaping----void--",children:(0,s.jsx)(n.code,{children:"translateView(view: UIView, viewController: UIViewController, translationType: TranslationType = .translateView, completionHandler: @escaping () -> Void = {})"})}),"\n",(0,s.jsxs)(n.p,{children:["Translates a ",(0,s.jsx)(n.code,{children:"UIView"})," by inferring the screen name from the specified ",(0,s.jsx)(n.code,{children:"UIViewController"})," class name."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"view"}),": The view to translate."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"viewController"}),": The view controller providing the screen name."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"translationType"}),": The type of translation (default ",(0,s.jsx)(n.code,{children:".translateView"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"completionHandler"}),": Called after translation. (to be deprecated)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"Wovn.translateView(view: myView, viewController: self)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"translatenavigationitem-uinavigationitem-screenname-string--nil-translationtype-translationtype--translateview-completionhandler-escaping----void--",children:(0,s.jsx)(n.code,{children:"translate(navigationItem: UINavigationItem, screenName: String? = nil, translationType: TranslationType = .translateView, completionHandler: @escaping () -> Void = {})"})}),"\n",(0,s.jsxs)(n.p,{children:["Translates the ",(0,s.jsx)(n.code,{children:"UINavigationItem"})," titles and elements using the current language."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"navigationItem"}),": The navigation item to translate."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"screenName"}),": (Optional) The screen name for translations."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"translationType"}),": The type of translation (default ",(0,s.jsx)(n.code,{children:".translateView"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"completionHandler"}),": Called after translation completes. (to be deprecated)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:'Wovn.translate(navigationItem: myNavItem, screenName: "DetailView")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"translatenavigationitem-uinavigationitem-viewcontroller-uiviewcontroller-translationtype-translationtype--translateview-completionhandler-escaping----void--",children:(0,s.jsx)(n.code,{children:"translate(navigationItem: UINavigationItem, viewController: UIViewController, translationType: TranslationType = .translateView, completionHandler: @escaping () -> Void = {})"})}),"\n",(0,s.jsxs)(n.p,{children:["Similar to the previous method, but infers the screen name from the ",(0,s.jsx)(n.code,{children:"UIViewController"})," class name."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"navigationItem"}),": The navigation item to translate."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"viewController"}),": The controller providing the screen name."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"translationType"}),": The type of translation."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"completionHandler"}),": Completion closure. (to be deprecated)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"Wovn.translate(navigationItem: navigationItem, viewController: self)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"startappgroupidentifier-string--nil-isdebugmode-bool--false-autotranslateuikit-bool--true-isnotificationserviceenv-bool--false",children:(0,s.jsx)(n.code,{children:"start(appGroupIdentifier: String? = nil, isDebugMode: Bool = false, autoTranslateUIKit: Bool = true, isNotificationServiceEnv: Bool = false)"})}),"\n",(0,s.jsx)(n.p,{children:"Initializes and configures the WOVN SDK. This method sets up translation data, configurations, and optionally swizzles UIKit methods for automatic translation."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"appGroupIdentifier"}),": Identifier for app groups (optional)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"isDebugMode"}),": Enable debug mode for logging and testing. Recommended to use ",(0,s.jsx)(n.code,{children:"_isDebugAssertConfiguration()"})," to enable debug mode only in debug builds."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"autoTranslateUIKit"}),": Automatically translates UI elements by swizzling UIKit methods."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"isNotificationServiceEnv"}),": If ",(0,s.jsx)(n.code,{children:"true"}),", the SDK optimizes for notification translation environment."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:'Wovn.start(\n    appGroupIdentifier: "group.io.wovn.workbox",\n    isDebugMode: _isDebugAssertConfiguration(),\n    autoTranslateUIKit: true,\n    isNotificationServiceEnv: false\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"setuserpermissionpermission-wovnpermission-enabled-bool",children:(0,s.jsx)(n.code,{children:"setUserPermission(permission: WovnPermission, enabled: Bool)"})}),"\n",(0,s.jsx)(n.p,{children:"Sets the permission for a specific WOVN feature (e.g. reporting, error reporting)."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"permission"}),": The ",(0,s.jsx)(n.code,{children:"WovnPermission"})," type to set."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"enabled"}),": ",(0,s.jsx)(n.code,{children:"true"})," to enable the permission, ",(0,s.jsx)(n.code,{children:"false"})," to disable it."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"Wovn.setUserPermission(permission: .report, enabled: true)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"haspermissionpermission-wovnpermission---bool",children:(0,s.jsx)(n.code,{children:"hasPermission(permission: WovnPermission) -> Bool"})}),"\n",(0,s.jsx)(n.p,{children:"Checks if a certain WOVN permission is currently enabled."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"permission"}),": The ",(0,s.jsx)(n.code,{children:"WovnPermission"})," to check."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," ",(0,s.jsx)(n.code,{children:"true"})," if enabled, ",(0,s.jsx)(n.code,{children:"false"})," otherwise."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"let hasReportPermission = Wovn.hasPermission(permission: .report)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var t=i(6540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);